<form name="basewpopup" bk="F9F8F7" margin="0" sizeable="2" toolwindow="1" hidden="1" topmost="1" thinframe="1" nocaption="1" esccancel="1" fauthor="$Author: David.salter$" fdate="$Date: 14/05/03 10:26$" frevision="$Revision: 7$" notrace="1">
<members>
<List name="popItems" cls="pItems" />
<Integer name="selRow" />
<Integer name="openBefore" />
<Integer name="mode" />
<String name="typed" />
<Integer name="sep" />
<Integer name="subOpenId" />
<Object name="refObj" />
<String name="prefixStr" />
<Integer name="dynamenu" />
<Object name="callbackObj" />
<Integer name="populated" />
<String name="result" />
<Object name="resultObj" />
<method name="add" return="pItems">
<param name="dispText" type="string" />
<param name="code" type="string" />
<param name="icon" type="string" />
<![CDATA[//@cmember add
//@param string | dispText | Menu text or another wPopup object
//@param string | code | Code to be returned or the menu text to display next to the submenu
//@param string | icon | optional Icon filename
//@return pItems |
//@version Andrew Griffin | 06-09-02 09:13 |
//@version Darren.Ball | 12-05-03 11:46 |

if (dispText==NULL) return;

if (!DispText.ClassName().EQ("DATE") && !dispText.isObject() && !dispText) return addSeparator();

pitems p = &popItems.CreateRow();

if (sep)    // add a seperator...
{
    p.disp = "@-";
    p = &popItems.CreateRow();
    sep = 0;
}

if (!dispText.isObject())   // Adding a menu item...
{
    if(DispText.ClassName().EQ("Date"))
        p.disp = DispText.ToString();
    else
        p.disp = dispText;

    if (code!=null)
        p.code = code;
    else
        p.code = dispText;
}
else
{
    p.disp = code;
    p.subMenu.setmagicpointer( &dispText );
}

if (icon!=null) p.icon = icon;

while (1)
{
    switch (p.disp.charAt(0))
    {
      case '.':
        p.mode |= 1;    // disabled...
        p.disp = p.disp.substring( 1 );
        continue;

      case '+':
        p.mode |= 2;    // ticked..
        p.disp = p.disp.substring( 1 );
        p.icon = "classes::resource::standard::tickBlack.ico";
        continue;
    }

    break;
}

string d = p.disp.replace( "&&", "¬" );
d = d.replace( "&", "" );
p.disp = d.replace( "¬", "&" );

int t = p.disp.indexof( "\r" ); // no new lines...
if (t>=0)
    p.disp = p.disp.left( t ) + "...";

t = p.disp.indexof( "\t" );
if (t>=0)
{
    p.disp2 = p.disp.substring( t+1 );
    p.disp = p.disp.left( t );
    showGroup( "tab", 1 );
}

// . grey
// + checked

return p;]]>
</method>
<method name="addPopup">
<param name="dispText" type="string" />
<param name="callbackObj" type="object" />
<param name="prefix" type="string" />
<param name="refObj" type="object" />
<param name="icon" type="string" />
<![CDATA[//@cmember addPopup
//@param string | dispText | Sub-dynamenu heading
//@param object | callbackObj | Object to callback 'FillMenu( dynamenu d )' on
//@param string | prefix | String prefix for returned codes
//@param object | refObj | An object to reference with the new sub-dynamenu
//@param string | icon | optional Icon filename
//@version Andrew Griffin | 22-07-02 14:29 |

//
// Create DynaMenu Object

classes::core::wdynamenu d;

d.dynamenu = 1;
d.callbackObj.setmagicpointer( &callbackObj );
if (refObj!=null) d.refObj.setmagicpointer( &refObj );
if (prefix!=null) d.prefixStr = prefix;

//
// Add the new sub-dynamenu to this menu

add( d, dispText, icon );]]>
</method>
<method name="addSeparator">
<![CDATA[//@cmember addSeparator
//@version Andrew Griffin | 24-05-02 13:09 |

if (popItems.Count()) sep = 1;]]>
</method>
<method name="track">
<param name="mode" type="int" />
<param name="ctrl" type="control" />
<param name="offsetx" type="int" />
<param name="offsety" type="int" />
<param name="tabIcon" type="string" />
<param name="colour" type="string" />
<![CDATA[//@cmember track
//@param int | mode |
//@param control | ctrl |
//@param int | offsetx |
//@param int | offsety |
//@param string | tabIcon |
//@param string | colour |
//@version Andrew Griffin | 22-07-02 12:51 |
//@i

if (!popItems.Count()) return "";

result = "";

form f = &sys::ActiveWindow();
if (f==null) open(); else dialog( f );

SetWindowName( "rootPopup" );

gridcell sgc = NULL;
if (ctrl!=null) sgc = &ctrl.GetCell();
int w,h;

if (tabIcon!=null && tabIcon)
{
    showGroup( "icon", 1 );
    w = sgc.getWidth();
    h = sgc.getHeight();

    gridcell gc = &grid.GetCell(0,0).Control.GetCell(0,0);
    gc.setW( w+4 );
    gc.setH( h+4 );
    if (colour!=null)
    {
        gc.setBK( colour );
        grid.GetCell(0,0).Control.GetCell(1,0).setBK( colour );
    }
}

populateForm( sgc, NULL, -3, -h-4 );

if (tabIcon!=null && tabIcon)
{
    Object Z = CreateRegion();

    Z.AddRect( 0,0, w+6, h+6, 2 );
    Z.AddRect( 0,h+5, 4000,4000, 2 );

    Z.AddRect( 3,4, w+3, h+4, 3 );  // cut out hole for icon

    SetWindowRegion( Z );
}

waitOnClose();
if (f!=null) f.SetFocus();
sys::Wait( 0 );

if (!dynamenu) return result;   // PopupMenu
return resultObj;               // DynaMenu]]>
</method>
<method name="openSub">
<param name="gcell" type="gridcell" />
<param name="par" type="basewpopup" />
<param name="selFirst" type="int" />
<![CDATA[//@cmember openSub
//@param gridcell | gcell |
//@param basewpopup | par |
//@param int | selFirst |
//@version Andrew Griffin | 22-07-02 13:50 |
//@i

if (dynamenu && !populated)
{
    //
    // DynaMenus must be filled dynamically when they are first displayed

    dialog( par );
    if (callbackObj.HasMethod( "fillmenu"))
        callbackObj.fillMenu( this );
    if (!popItems.Count())
    {
        close();
        return 0;  // no items in popup...
    }
}
else
{
    if (!popItems.Count()) return 0;  // no items in popup...
    dialog( par );
}

//
// Create form from popItems list

populateForm( gcell, par );

//
// Option to select the first row in the list... (when navigating by keyboard)

if (selFirst!=null && selFirst && popItems.Count())
{
    selectRow( selRow, 0 );
    selRow = 0;
    selectRow( selRow, 1 );
}

//
// Flag dynamenu as populated

populated = 1;
return 1;]]>
</method>
<method name="populateForm">
<param name="gcell" type="gridcell" />
<param name="par" type="form" />
<param name="offX" type="int" />
<param name="offY" type="int" />
<![CDATA[//@cmember populateForm
//@param gridcell | gcell |
//@param form | par |
//@param int | offX |
//@param int | offY |
//@version Andrew Griffin | 27-05-02 15:15 |
//@version Jonathan.Muir | 09-09-16 09:34 |
//@i

if (!openBefore)
{
    for (int i=0; i<popItems.Count(); i++)
    {
        pitems pi = &popItems[i];
        gridrow gr = null;

        if (pi.disp=="@-")
            gr = &idPList.DuplicateRow( 2, 1, i+3 );
        else
        if (pi.mode & 1)
            gr = &idPList.DuplicateRow( 1, 1, i+3 );
        else
            gr = &idPList.DuplicateRow( 0, 1, i+3 );

        label lb = &gr.GetCell( 1 ).Control;

        lb.setText( pi.disp );
        lb.SetAttr( "rowNo", "" + i );

        gr.GetCell( 2 ).Control.setText( pi.disp2 );

        if (pi.subMenu!=null)   // Adding a menu item...
        {
            lb.setText( pi.disp );
            gr.GetCell( 3 ).Control.SetAttr( "img", "classes::resource::standard::arrowRightBlack.ico" );
        }

        if (pi.icon)
        {
            control img = &gr.GetCell( 0 ).Control;
            img.SetAttr( "img", pi.icon );
        }
    }

    idPList.DeleteRow( 0 );
    idPList.DeleteRow( 0 );
    idPList.DeleteRow( 0 );
    openBefore = 1;
}
else
    selectRow( selRow, 0 );

selRow = -1;

SizeFormToContent();

if (gcell==null)
    SnapToCursor();
else
if (par==null)
{
    SnapToCell( gcell );
    if (offX!=null || offY!=null)
        SetPos( XPos()+offX, YPos()+offY );
}
else
{
    SnapToCell( gcell );
    SetPos( par.XPos()+par.XSize() - 2, YPos()-20 );

    if (XPos() + XSize() > DesktopW())
        setPos( par.XPos()-XSize() + 2, ypos() );   // on left hand side instead...
}

classes::core::globalForm::moveIntoFullView( this );
SizeToFitIntoView();

//int ys = YSize();
//classes::core::globalForm::sizeIntoFullView( this );
//FitRecursive();

show( 1 );
SetFocus();
SetForeground();]]>
</method>
<method name="onClick">
<param name="ctrl" type="label" />
<![CDATA[//@cmember onClick
//@param label | ctrl |
//@version Andrew Griffin | 22-07-02 12:59 |

int row = ctrl.GetRow().GetCell(1).Control.GetControlAttr( "rowNo" ).val();

pitems p = &popItems[ row ];
if (p.subMenu==null)
    return doRowSelected( p );

setTimer(0);    // open submenu]]>
</method>
<method name="doRowSelected">
<param name="p" type="pitems" />
<![CDATA[//@cmember doRowSelected
//@param pitems | p |
//@version Andrew Griffin | 22-07-02 13:52 |
//@i

basewPopup r = &getRoot();
if (!dynamenu)
{
    r.result = p.code;                      // popupmenu
}
else
{
    r.resultObj.setmagicpointer( &this );    // dynamenu
    result = getPrefixes() + p.code;
}

r.close();

return;]]>
</method>
<method name="onMouseOver">
<param name="ctrl" type="control" />
<![CDATA[//@cmember onMouseOver
//@param control | ctrl |
//@version Andrew Griffin | 24-05-02 11:46 |

// stop timers in parents...

wpopup p = &this;
while (1)
{
    p.killtimer();
    if (p.GetWindowName() == "rootPopup") break;
    p = p.GetParent();
}

// select row...

string nrow = ctrl.GetRow().GetCell(1).Control.GetControlAttr( "rowNo" );
if (!nrow) return;

selectRow(selRow,0);
selRow = nRow.val();
selectRow(selRow,1);
mode = 0;
setTimer(300);]]>
</method>
<method name="onMouseOut">
<param name="ctrl" type="control" />
<![CDATA[//@cmember onMouseOut
//@param control | ctrl |
//@version Andrew Griffin | 23-05-02 13:01 |

// stop timers in parents...

wpopup p = &this;
while (1)
{
    p.killtimer();
    if (p.GetWindowName() == "rootPopup") break;
    p = p.GetParent();
}

// select row...

selectRow(selRow,0);
selRow = -1;]]>
</method>
<method name="selectRow">
<param name="rowId" type="int" />
<param name="state" type="int" />
<param name="moveIntoView" type="int" />
<![CDATA[//@cmember selectRow
//@param int | rowId |
//@param int | state |
//@param int | moveIntoView |
//@version Andrew Griffin | 24-05-02 16:26 |

gridRow gr = &idPList.GetRow( rowId );
if (gr==null) return;

pItems p = &popItems[rowId];

if (state==null || state)   // ** selected **
{
    gr.GetCell(0).setBK( "B6BDD2" );
    gr.GetCell(1).control.SetAttr( "BKSel", "B6BDD2" );
    gr.GetCell(1).setBK( "B6BDD2" );
    gr.GetCell(2).control.SetAttr( "BKSel", "B6BDD2" );
    gr.GetCell(2).setBK( "B6BDD2" );
    gr.GetCell(3).setBK( "B6BDD2" );

    if (GetWindowName()!="rootPopup") getParent().backSelectChoice();
}
else                        // ** unselected **
{
    gr.GetCell(0).setBK( "DBD8D1" );
    gr.GetCell(1).control.SetAttr( "BKSel", "F9F8F7" );
    gr.GetCell(1).setBK( "" );
    gr.GetCell(2).control.SetAttr( "BKSel", "F9F8F7" );
    gr.GetCell(2).setBK( "" );
    gr.GetCell(3).setBK( "" );
}

if (moveIntoView!=null && moveIntoView)
    gr.GetCell(0).ScrollIntoView();]]>
</method>
<method name="onTimer">
<![CDATA[//@cmember onTimer
//@version Andrew Griffin | 22-07-02 13:17 |
//@i

KillTimer();

if (mode==1)
{
    onDeactivate2();
    mode = 0;
    return;
}


if (selRow<0 || selRow>=popItems.Count()) return;

//
// Hovering!!!

pitems row = &popItems[selRow];
if (row.subMenu==null) // || !row.subMenu.popItems.Count()))
{
    closeSubMenus();
    return;
}

if (row.subMenu.isvisible()) return;

//
// Close SubMenus...

closeSubMenus();

//
// Open SubMenu

subOpenId = selRow;

row.subMenu.openSub(
    idPList.GetCell( selRow, 3 ),
    this,
    mode==2 // select first in list?
);]]>
</method>
<method name="closeSubMenus">
<![CDATA[//@cmember closeSubMenus
//@param
//@return
//@version Andrew Griffin | 21-05-02 16:21 |

while (1)
{
    form f = &GetPopup(0);
    if (f==null) break;
    f.close();
}

SetFocus();]]>
</method>
<method name="onDeactivate">
<![CDATA[//@cmember onDeactivate
//@version Andrew Griffin | 23-05-02 13:19 |
//@i

if (!isVisible()) return;

mode = 1;
SetTimer( 100 );]]>
</method>
<method name="onDeactivate2">
<![CDATA[//@cmember onDeactivate2
//@version Andrew Griffin | 22-05-02 09:24 |
//@i

wpopup a = &sys::ActiveWindow();
wpopup r = &getRoot();

if (a==null || a.ClassName() != r.ClassName() || a.getRoot() != r) r.close();]]>
</method>
<method name="getRoot" return="basewPopup">
<![CDATA[//@cmember getRoot
//@return basewPopup |
//@version Andrew Griffin | 22-07-02 12:46 |
//@i

wPopup p = &this;

while (p.GetWindowName()!="rootPopup")
    p = p.GetParent();

return p;]]>
</method>
<method name="getPrefixes" return="string">
<![CDATA[//@cmember getPrefixes
//@return string |
//@version Andrew Griffin | 22-07-02 14:29 |
//@i

basewPopup p = &this;

string preStr = prefixStr;

while (p.GetWindowName()!="rootPopup")
{
    p = p.GetParent();
    preStr = p.prefixStr + preStr;
}

return preStr;]]>
</method>
<method name="onCharDown">
<param name="Key" type="int" />
<param name="State" type="int" />
<param name="Ctrl" type="control" />
<![CDATA[//@cmember onCharDown
//@param int | Key |
//@param int | State |
//@param control | Ctrl |
//@version Andrew Griffin | 22-07-02 12:59 |
//@version Simon Carroll | 06-11-02 15:08 |

switch (key)
{
    case 27 :                   // Escape
        if (getRoot() != this)
            GetParent().SetFocus();
        close();
        break;
    case 38 :                   // Up
        selectRowMove( -1, 1, 0 );
        break;
    case 40 :                   // Down
        selectRowMove( 1, 1, 0 );
        break;
    case 33 :                   // Page Up
        selectRowMove( -1, 20, 1 );
        break;
    case 34 :                   // Page Down
        selectRowMove( 1, 20, 1 );
        break;
    case 36 :                   // Home
        selectRowMove( -1, popItems.Count(), 1 );
        break;
    case 35 :                   // End
        selectRowMove( 1, popItems.Count(), 1 );
        break;
    case 37 :                   // Left
        if (getRoot() == this) break;
        GetParent().SetFocus();
        close();
        break;
    case 39 :                   // Right
        mode = 2;
        setTimer( 0 );
        break;
    case 08 :                   // Back space
        if (typed) typed = typed.left( typed.length()-1 );
        findPossibles();
        break;
    case 46 :                   // Del
        typed = "";
        findPossibles();
        break;
    case 13 :                   // Enter
        if (selRow==-1)
        {
            selectRowMove( 1 );
            return;
        }
        pitems p = &popItems[ selRow ];
        if (p.subMenu==null)
            return doRowSelected( p );

        mode = 2;
        setTimer(0);    // Open submenu
        break;
    default :

        string k = Key.charstring().lower();
        if (k>="a" && k<="z" || k>="0" && k<="9" || k=="½" || k==" ") {
            if (k=="½") k = "-";
            if (State==3) {
                if (k=="-") k="_"; else
                if (k=="8") k="*";
            }
            typed += k;
            findPossibles();
        } //else this.message( Key );
}]]>
</method>
<method name="selectRowMove">
<param name="dir" type="int" />
<param name="count" type="int" />
<param name="nowrap" type="int" />
<![CDATA[//@cmember selectRowMove
//@param int | dir |
//@param int | count |
//@param int | nowrap |
//@version Andrew Griffin | 24-05-02 11:37 |

typed = "";
selectRow( selRow, 0 );

if (selRow==-1)
{
    if (dir<0) selRow = popItems.Count();
}

int lGood = selRow;
int stopLoop = -1;

do
{
    selRow += dir;
    if (stopLoop==-1) stopLoop = selRow;
        else if (selRow == stopLoop)
        {
            selRow = lGood;
            break;
        }
    if (lGood == selRow) break;

    if (selRow<0)
        if (nowrap==null || !nowrap)
            selRow = popItems.Count()-1;
        else
        { selRow = lGood; break; }
    else
    if (selRow>=popItems.Count())
        if (nowrap==null || !nowrap)
            selRow = 0;
        else
        { selRow = lGood; break; }

    count--;
    if (popItems[selRow].disp!="@-") lGood = selRow;
}
while (popItems[selRow].disp=="@-" || popItems[selRow].mode & 1 || count>0);

if (selRow>=popItems.Count())
    selRow = -1;

selectRow( selRow, 1, 1 );]]>
</method>
<method name="findPossibles">
<![CDATA[//@cmember findPossibles
//@param
//@return
//@version Andrew Griffin | 22-05-02 11:34 |

for (int i=0; i<popItems.Count(); i++)
{
    pItems p = &popItems[i];
    if (p.disp.lower().beginsWith( typed ))
    {
        selectRow( selRow, 0 );
        selRow = i;
        selectRow( selRow, 1, 1 );
        return;
    }
}

selectRow( selRow, 0 );
selRow = -1;]]>
</method>
<method name="backSelectChoice">
<![CDATA[//@cmember backSelectChoice
//@param
//@return
//@version Andrew Griffin | 24-05-02 14:22 |
//@i

if (subOpenId != selRow)
{
    selectRow( selRow, 0 );
    selRow = subOpenId;
    selectRow( selRow, 1 );
}
else
{
    if (GetWindowName()!="rootPopup")
        getParent().backSelectChoice();
}]]>
</method>
<method name="parent" return="object">
<![CDATA[//@cmember parent
//@return object |
//@version Andrew Griffin | 22-07-02 13:47 |

if (GetWindowName()=="rootPopup") return NULL;

return GetParent().callbackObj;]]>
</method>
<method name="parentMenu" return="object">
<![CDATA[//@cmember parentMenu
//@return object |
//@version Andrew Griffin | 22-07-02 14:25 |

if (GetWindowName()=="rootPopup") return NULL;

return GetParent();]]>
</method>
<method name="object" return="object">
<![CDATA[//@cmember object
//@return object |
//@version Andrew Griffin | 22-07-02 14:26 |

return callbackObj;]]>
</method>
<method name="Prefix" return="string">
<![CDATA[//@cmember Prefix
//@return string |
//@version Andrew Griffin | 22-07-02 14:30 |

return prefixStr;]]>
</method>
<method name="ReferenceObject" return="object">
<![CDATA[//@cmember ReferenceObject
//@return object |
//@version Andrew Griffin | 22-07-02 11:43 |

return refObj;]]>
</method>
<method name="selection" return="string">
<![CDATA[//@cmember selection
//@return string |
//@version Andrew Griffin | 22-07-02 13:02 |

return result;]]>
</method>
<method name="orderList">
<![CDATA[//@cmember orderList
//@param
//@return
//@version Andrew Griffin | 06-08-02 09:25 |
//@i

//
// Order the popItems list

popItems.OrderBy( "disp" );
popItems.OrderList();]]>
</method>
</members>
<static />
<grid>
<row>
<col align="W" imgtile="8">
<grid hide="Y" groups="icon">
<row>
<col align="V" bk="219,216,209" />
<col w="1" bk="0,0,0" />
<col align="W" />
</row>
<row>
<col bk="219,216,209" />
<col bk="0,0,0" />
<col h="1" bk="0,0,0" />
</row>
</grid>
</col>
</row>
<row>
<col tpad="1" bpad="1" align="W" imgtile="8">
<grid name="idPList">
<row>
<col lpad="4" tpad="2" bpad="2" w="24" align="V" bk="219,216,209">
<Image text="Image" img="classes::resource::standard::blankicon.ico" smallIcon="1" onmouseover="onMouseOver" onclick="onClick" onmouseout="onMouseOut" />
</col>
<col lpad="8" rpad="4" h="20" align="XV">
<Label text="&gt;&gt;" tx="FF000007" onclick="onClick" onmouseover="onMouseOver" txsel="000000" bksel="F9F8F7" onmouseout="onMouseOut" size="8" font="Tahoma" />
</col>
<col lpad="8" rpad="4" h="20" align="XV">
<Label tx="100,100,100" onclick="onClick" onmouseover="onMouseOver" txsel="646464" bksel="F9F8F7" onmouseout="onMouseOut" size="8" font="Tahoma" hide="Y" groups="tab" />
</col>
<col bpad="1" w="16" align="V">
<Image text="Image" img="classes::resource::standard::blankicon.ico" smallIcon="1" onmouseover="onMouseOver" onclick="onClick" onmouseout="onMouseOut" />
</col>
</row>
<row>
<col lpad="4" tpad="2" bpad="2" w="24" align="V" bk="219,216,209">
<Image text="Image" img="classes::resource::standard::blankicon.ico" smallIcon="1" />
</col>
<col lpad="8" rpad="4" h="20" align="XV">
<Label text="&gt;&gt;" tx="166,166,166" size="8" font="Tahoma" />
</col>
<col lpad="8" rpad="4" h="20" align="XV">
<Label tx="166,166,166" size="8" font="Tahoma" hide="Y" groups="tab" />
</col>
<col bpad="1" w="16" align="V">
<Image text="Image" img="classes::resource::standard::blankicon.ico" smallIcon="1" />
</col>
</row>
<row>
<col tpad="2" bpad="2" w="24" align="XV" bk="219,216,209" />
<col lpad="8" tpad="2" bpad="2" align="XV">
<grid>
<row>
<col h="1" align="W" bk="166,166,166" />
</row>
</grid>
</col>
<col tpad="2" bpad="2" align="XV">
<grid>
<row>
<col h="1" align="W" bk="166,166,166" />
</row>
</grid>
</col>
<col tpad="2" bpad="2" align="XV">
<grid>
<row>
<col h="1" align="W" bk="166,166,166" />
</row>
</grid>
</col>
</row>
<row>
<col w="24" align="XV" bk="219,216,209" />
<col lpad="8" align="XV" />
<col lpad="8" align="WV" />
<col w="16" align="XV" />
</row>
</grid>
</col>
</row>
</grid>
<return>
<rmeth name="add" cls="pItems" />
<rmeth name="getRoot" cls="basewPopup" />
<rmeth name="getPrefixes" cls="string" />
<rmeth name="parent" cls="object" />
<rmeth name="parentMenu" cls="object" />
<rmeth name="object" cls="object" />
<rmeth name="Prefix" cls="string" />
<rmeth name="ReferenceObject" cls="object" />
<rmeth name="selection" cls="string" />
</return>
</form>
