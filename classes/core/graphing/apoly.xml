<class name="aPoly" fauthor="$Author: Andrew.g $" fdate="$Date: 13/09/02 16:30 $" frevision="$Revision: 1 $">
<members>
<List name="points" cls="aPoint" />
<Integer name="type" comment="0 = Line Art&#13;&#10;1 = Filled Poly&#13;&#10;2 = Caption" />
<Integer name="is3d" comment="0 = 2d&#13;&#10;1 = 3d" />
<Integer name="color" />
<String name="caption" />
<Object name="gObj" />
<String name="strp" />
<Double name="zBase" />
<method name="setTo" return="aPoly">
<param name="typ" type="int" />
<param name="colour" type="int" />
<param name="caption" type="string" />
<param name="is3D" type="int" />
<![CDATA[//@cmember setTo
//@param int | typ | 0 = Line Art; 1 = Filled Poly; 2 = Caption
//@param int | colour | sys::RGB( int r, int g, int b ) (optional)
//@param string | caption | Caption to appear on polygon object (optional)
//@param int | is3D | 0 = 2d, 1 = 3d (optional)
//@return aPoly | Initialised Poygon object
//@version Andrew Griffin | 11-09-02 15:38 |

type = typ;

if (is3D!=null)     this.is3D = is3D;
if (colour!=null)   this.color = colour;
if (caption!=null)  this.caption = caption;

return this;]]>
</method>
<method name="addPoint" return="aPoly">
<param name="x" type="double" />
<param name="y" type="double" />
<param name="z" type="double" />
<![CDATA[//@cmember addPoint
//@param double | x |
//@param double | y |
//@param double | z | (optional)
//@return aPoly | Initialised Poygon object
//@version Andrew Griffin | 11-09-02 16:58 |

points.CreateRow().setTo( x,y,z );

return this;]]>
</method>
<method name="addLine" return="aPoly">
<param name="x" type="double" />
<param name="y" type="double" />
<param name="x2" type="double" />
<param name="y2" type="double" />
<param name="z" type="double" />
<param name="z2" type="double" />
<![CDATA[//@cmember addLine
//@param double | x |
//@param double | y |
//@param double | x2 |
//@param double | y2 |
//@param double | z | (optional)
//@param double | z2 | (optional)
//@return aPoly | Initialised Poygon object
//@version Andrew Griffin | 12-09-02 11:15 |

points.CreateRow().setTo(  x,  y, z );
points.CreateRow().setTo( x2, y2, (z2==null) ? z : z2 );

return this;]]>
</method>
<method name="addRectangle" return="aPoly">
<param name="x" type="double" />
<param name="y" type="double" />
<param name="x2" type="double" />
<param name="y2" type="double" />
<param name="z" type="double" />
<![CDATA[//@cmember addRectangle
//@param double | x |
//@param double | y |
//@param double | x2 |
//@param double | y2 |
//@param double | z | (optional)
//@return aPoly | Initialised Poygon object
//@version Andrew Griffin | 12-09-02 09:54 |

points.CreateRow().setTo(  x,  y, z );
points.CreateRow().setTo(  x, y2, z );
points.CreateRow().setTo( x2, y2, z );
points.CreateRow().setTo( x2,  y, z );

return this;]]>
</method>
<method name="addSector" return="aPoly">
<param name="x" type="double" />
<param name="y" type="double" />
<param name="radius" type="double" />
<param name="angFrom" type="double" />
<param name="angTo" type="double" />
<param name="offset" type="double" />
<param name="z" type="double" />
<param name="caption" type="string" />
<![CDATA[//@cmember addSector
//@param double | x |
//@param double | y |
//@param double | radius |
//@param double | angFrom |
//@param double | angTo |
//@param double | offset | offset from 0 to 1 (1 is full radius offset) (optional)
//@param double | z | (optional)
//@param string | caption |
//@return aPoly | Initialised Poygon object
//@version Andrew Griffin | 13-09-02 15:55 |

//
// pull out this slice...

int av = angFrom + angTo;
av /= 2;

if (offset != null && offset)
{
    x += radius * offset * sin( av );
    y -= radius * offset * cos( av );
}

//
// Plot slice origin (no origin if a full circle)

if (angFrom==angTo || angFrom%360 != angTo%360)
    addPoint( x, y, z );

//
// Plot rest of slice angles...

for (int j = angFrom; ; j += 5)
{
    if (j>angTo) j = angTo;
    addPoint( x+radius*sin( j ), y-radius*cos( j ), z );
    if (j>=angTo) break;
}

if (caption!=null && caption)
{
    //
    // Add caption in seperate note object so it appears in a reasonable place on the sector

    cwGraphics gr = &OwnerList().OwnerRow();
    gr.add_Text(    x+radius*sin( av )*0.6, y-radius*cos( av )*0.6,
                    caption,
                    z );
}

return this;]]>
</method>
<method name="projectFlatTo3D" return="aPoly">
<param name="zOffsetFront" type="double" />
<param name="zOffsetBack" type="double" />
<param name="edgeColour" type="int" />
<![CDATA[//@cmember projectFlatTo3D
//@param double | zOffsetFront |
//@param double | zOffsetBack |
//@param int | edgeColour |
//@return aPoly |
//@version Andrew Griffin | 13-09-02 14:42 |

cwGraphics g = &OwnerList().OwnerRow();
aScale scl = &g.scale[0];   // active scaler

int count = points.Count();

if (type==0)
{
    //
    // Line Art... Simple

    for (int i=count-1; i>=0; i--)
    {
        int idx = points.AddRow( points[i] );
        points[idx].z = points[idx].z + zOffsetBack*scl.scaleZ;
        points[i].z = points[i].z + zOffsetFront*scl.scaleZ;
    }

    type = 1;
}
else

if (type==1)
{
    //
    // Filed Poly... Trickier

    aPoly pL[] = &OwnerList();

    for (int i=count-1; i>=0; i--)
        points[i].z = points[i].z + zOffsetFront*scl.scaleZ;

    // create edge polygons for each point...

    for (i=0; i<count; i++)
    {
        int ni = (i+1) % count; // next point

        // Create joint lines
        aPoly p = &pL.CreateRow().setTo( 1, edgeColour, "", 1 );
        p.points.AddRow( points[i] );
        p.points.AddRow( points[ni] );
        p.points.AddRow( points[ni] );
        p.points.AddRow( points[i] );

        // Offset poly z

        p.points[2].z = p.points[2].z + (zOffsetBack-zOffsetFront)*scl.scaleZ;
        p.points[3].z = p.points[3].z + (zOffsetBack-zOffsetFront)*scl.scaleZ;
    }
}

return this;]]>
</method>
<method name="resetPoints" return="aPoly">
<![CDATA[//@cmember resetPoints
//@return aPoly |
//@version Andrew Griffin | 11-09-02 15:43 |

points.reset();

return this;]]>
</method>
<method name="preRender">
<param name="orgX" type="double" />
<param name="orgY" type="double" />
<param name="orgZ" type="double" />
<param name="rx" type="double" />
<param name="ry" type="double" />
<param name="rz" type="double" />
<param name="perspective" type="int" />
<param name="stepBack" type="double" />
<![CDATA[//@cmember preRender
//@param double | orgX |
//@param double | orgY |
//@param double | orgZ |
//@param double | rx |
//@param double | ry |
//@param double | rz |
//@param int | perspective |
//@param double | stepBack |
//@version Andrew Griffin | 13-09-02 12:31 |
//@i

zBase = -10000;
strp = "";

if (is3d)
{
    for (int i=points.Count()-1; i>=0; i--)
    {
        //
        // Offset point back to rotation origin

        double  x = points[i].x - orgX;
        double  y = points[i].y - orgY;
        double  z = points[i].z - orgZ;

        //
        // Rotate around x axis

        double  y2 = y * cos(rx) - z * sin(rx);
        double  z2 = y * sin(rx) + z * cos(rx);

        //
        // Rotate around y axis

        double  x2 = x * cos(ry) - z2 * sin(ry);
                z  = x * sin(ry) + z2 * cos(ry);

        //
        // Rotate around z axis

                x = x2 * cos(rz) - y2 * sin(rz);
                y = x2 * sin(rz) + y2 * cos(rz);

//        zBase = zBase + z;
        if (z>zBase) zBase = z;

        //
        // flattern z axis and perform perspective scaling

        if (perspective)
        {
            if (stepBack!=null) z+=stepBack;
            z = orgZ / (orgZ + z/3);
            x = orgX + x * z;
            y = orgY + y * z;
        }
        else
        {
            x = orgX + x;
            y = orgY + y;
        }

        //
        // Add point to point strip string

        strp += " " + (int)x + "," + (int)y;
    }

//    if (points.Count())
//        zBase = zBase / points.Count();
}
else
{
    //
    // none 3d elements...

    for (int i=points.Count()-1; i>=0; i--)
        strp += " " + (int)points[i].x + "," + (int)points[i].y;
}]]>
</method>
<method name="render">
<param name="imgView" type="imageViewer" />
<![CDATA[//@cmember render
//@param imageViewer | imgView |
//@version Andrew Griffin | 13-09-02 11:28 |
//@i

if (gObj!=null)
{
    if (type==1)    imgView.RemoveNote( &gObj );
    else            imgView.RemoveMeasurement( &gObj );

    gObj.SetMagicPointer( NULL );
}

//
// If polygon object doesn't exisit then create it

switch (type)
{
    case 0, 2: // Line Art, Caption
    {
        classes::image::imagemeasurement m;
        m.setType( "d" );
        m.setShowValue( 0 );
        imgView.AddMeasurement( m );
        gObj.SetMagicPointer( &m );
        break;
    }

    case 1: // Filled Polygon
    {
        classes::image::imageNoteObj n;
        n.setType( "p" );
        imgView.AddNote( n );
        gObj.SetMagicPointer( &n );
        break;
    }
}

gObj.setPoints( strp );
gObj.setColor( color!=null ? color : 0 );
if (caption) gObj.setCaption( caption );]]>
</method>
</members>
<static>
<List name="SinTable" cls="aDouble" desc="Sin Table 0-359 degrees">
<item Value="0" />
<item Value="0.017452406" />
<item Value="0.034899497" />
<item Value="0.052335956" />
<item Value="0.069756474" />
<item Value="0.087155743" />
<item Value="0.104528463" />
<item Value="0.121869343" />
<item Value="0.139173101" />
<item Value="0.156434465" />
<item Value="0.173648178" />
<item Value="0.190808995" />
<item Value="0.207911691" />
<item Value="0.224951054" />
<item Value="0.241921896" />
<item Value="0.258819045" />
<item Value="0.275637356" />
<item Value="0.292371705" />
<item Value="0.309016994" />
<item Value="0.325568154" />
<item Value="0.342020143" />
<item Value="0.35836795" />
<item Value="0.374606593" />
<item Value="0.390731128" />
<item Value="0.406736643" />
<item Value="0.422618262" />
<item Value="0.438371147" />
<item Value="0.4539905" />
<item Value="0.469471563" />
<item Value="0.48480962" />
<item Value="0.5" />
<item Value="0.515038075" />
<item Value="0.529919264" />
<item Value="0.544639035" />
<item Value="0.559192903" />
<item Value="0.573576436" />
<item Value="0.587785252" />
<item Value="0.601815023" />
<item Value="0.615661475" />
<item Value="0.629320391" />
<item Value="0.64278761" />
<item Value="0.656059029" />
<item Value="0.669130606" />
<item Value="0.68199836" />
<item Value="0.69465837" />
<item Value="0.707106781" />
<item Value="0.7193398" />
<item Value="0.731353702" />
<item Value="0.743144825" />
<item Value="0.75470958" />
<item Value="0.766044443" />
<item Value="0.777145961" />
<item Value="0.788010754" />
<item Value="0.79863551" />
<item Value="0.809016994" />
<item Value="0.819152044" />
<item Value="0.829037573" />
<item Value="0.838670568" />
<item Value="0.848048096" />
<item Value="0.857167301" />
<item Value="0.866025404" />
<item Value="0.874619707" />
<item Value="0.882947593" />
<item Value="0.891006524" />
<item Value="0.898794046" />
<item Value="0.906307787" />
<item Value="0.913545458" />
<item Value="0.920504853" />
<item Value="0.927183855" />
<item Value="0.933580426" />
<item Value="0.939692621" />
<item Value="0.945518576" />
<item Value="0.951056516" />
<item Value="0.956304756" />
<item Value="0.961261696" />
<item Value="0.965925826" />
<item Value="0.970295726" />
<item Value="0.974370065" />
<item Value="0.978147601" />
<item Value="0.981627183" />
<item Value="0.984807753" />
<item Value="0.987688341" />
<item Value="0.990268069" />
<item Value="0.992546152" />
<item Value="0.994521895" />
<item Value="0.996194698" />
<item Value="0.99756405" />
<item Value="0.998629535" />
<item Value="0.999390827" />
<item Value="0.999847695" />
<item Value="1" />
<item Value="0.999847695" />
<item Value="0.999390827" />
<item Value="0.998629535" />
<item Value="0.99756405" />
<item Value="0.996194698" />
<item Value="0.994521895" />
<item Value="0.992546152" />
<item Value="0.990268069" />
<item Value="0.987688341" />
<item Value="0.984807753" />
<item Value="0.981627183" />
<item Value="0.978147601" />
<item Value="0.974370065" />
<item Value="0.970295726" />
<item Value="0.965925826" />
<item Value="0.961261696" />
<item Value="0.956304756" />
<item Value="0.951056516" />
<item Value="0.945518576" />
<item Value="0.939692621" />
<item Value="0.933580426" />
<item Value="0.927183855" />
<item Value="0.920504853" />
<item Value="0.913545458" />
<item Value="0.906307787" />
<item Value="0.898794046" />
<item Value="0.891006524" />
<item Value="0.882947593" />
<item Value="0.874619707" />
<item Value="0.866025404" />
<item Value="0.857167301" />
<item Value="0.848048096" />
<item Value="0.838670568" />
<item Value="0.829037573" />
<item Value="0.819152044" />
<item Value="0.809016994" />
<item Value="0.79863551" />
<item Value="0.788010754" />
<item Value="0.777145961" />
<item Value="0.766044443" />
<item Value="0.75470958" />
<item Value="0.743144825" />
<item Value="0.731353702" />
<item Value="0.7193398" />
<item Value="0.707106781" />
<item Value="0.69465837" />
<item Value="0.68199836" />
<item Value="0.669130606" />
<item Value="0.656059029" />
<item Value="0.64278761" />
<item Value="0.629320391" />
<item Value="0.615661475" />
<item Value="0.601815023" />
<item Value="0.587785252" />
<item Value="0.573576436" />
<item Value="0.559192903" />
<item Value="0.544639035" />
<item Value="0.529919264" />
<item Value="0.515038075" />
<item Value="0.5" />
<item Value="0.48480962" />
<item Value="0.469471563" />
<item Value="0.4539905" />
<item Value="0.438371147" />
<item Value="0.422618262" />
<item Value="0.406736643" />
<item Value="0.390731128" />
<item Value="0.374606593" />
<item Value="0.35836795" />
<item Value="0.342020143" />
<item Value="0.325568154" />
<item Value="0.309016994" />
<item Value="0.292371705" />
<item Value="0.275637356" />
<item Value="0.258819045" />
<item Value="0.241921896" />
<item Value="0.224951054" />
<item Value="0.207911691" />
<item Value="0.190808995" />
<item Value="0.173648178" />
<item Value="0.156434465" />
<item Value="0.139173101" />
<item Value="0.121869343" />
<item Value="0.104528463" />
<item Value="0.087155743" />
<item Value="0.069756474" />
<item Value="0.052335956" />
<item Value="0.034899497" />
<item Value="0.017452406" />
<item Value="0" />
<item Value="-0.017452406" />
<item Value="-0.034899497" />
<item Value="-0.052335956" />
<item Value="-0.069756474" />
<item Value="-0.087155743" />
<item Value="-0.104528463" />
<item Value="-0.121869343" />
<item Value="-0.139173101" />
<item Value="-0.156434465" />
<item Value="-0.173648178" />
<item Value="-0.190808995" />
<item Value="-0.207911691" />
<item Value="-0.224951054" />
<item Value="-0.241921896" />
<item Value="-0.258819045" />
<item Value="-0.275637356" />
<item Value="-0.292371705" />
<item Value="-0.309016994" />
<item Value="-0.325568154" />
<item Value="-0.342020143" />
<item Value="-0.35836795" />
<item Value="-0.374606593" />
<item Value="-0.390731128" />
<item Value="-0.406736643" />
<item Value="-0.422618262" />
<item Value="-0.438371147" />
<item Value="-0.4539905" />
<item Value="-0.469471563" />
<item Value="-0.48480962" />
<item Value="-0.5" />
<item Value="-0.515038075" />
<item Value="-0.529919264" />
<item Value="-0.544639035" />
<item Value="-0.559192903" />
<item Value="-0.573576436" />
<item Value="-0.587785252" />
<item Value="-0.601815023" />
<item Value="-0.615661475" />
<item Value="-0.629320391" />
<item Value="-0.64278761" />
<item Value="-0.656059029" />
<item Value="-0.669130606" />
<item Value="-0.68199836" />
<item Value="-0.69465837" />
<item Value="-0.707106781" />
<item Value="-0.7193398" />
<item Value="-0.731353702" />
<item Value="-0.743144825" />
<item Value="-0.75470958" />
<item Value="-0.766044443" />
<item Value="-0.777145961" />
<item Value="-0.788010754" />
<item Value="-0.79863551" />
<item Value="-0.809016994" />
<item Value="-0.819152044" />
<item Value="-0.829037573" />
<item Value="-0.838670568" />
<item Value="-0.848048096" />
<item Value="-0.857167301" />
<item Value="-0.866025404" />
<item Value="-0.874619707" />
<item Value="-0.882947593" />
<item Value="-0.891006524" />
<item Value="-0.898794046" />
<item Value="-0.906307787" />
<item Value="-0.913545458" />
<item Value="-0.920504853" />
<item Value="-0.927183855" />
<item Value="-0.933580426" />
<item Value="-0.939692621" />
<item Value="-0.945518576" />
<item Value="-0.951056516" />
<item Value="-0.956304756" />
<item Value="-0.961261696" />
<item Value="-0.965925826" />
<item Value="-0.970295726" />
<item Value="-0.974370065" />
<item Value="-0.978147601" />
<item Value="-0.981627183" />
<item Value="-0.984807753" />
<item Value="-0.987688341" />
<item Value="-0.990268069" />
<item Value="-0.992546152" />
<item Value="-0.994521895" />
<item Value="-0.996194698" />
<item Value="-0.99756405" />
<item Value="-0.998629535" />
<item Value="-0.999390827" />
<item Value="-0.999847695" />
<item Value="-1" />
<item Value="-0.999847695" />
<item Value="-0.999390827" />
<item Value="-0.998629535" />
<item Value="-0.99756405" />
<item Value="-0.996194698" />
<item Value="-0.994521895" />
<item Value="-0.992546152" />
<item Value="-0.990268069" />
<item Value="-0.987688341" />
<item Value="-0.984807753" />
<item Value="-0.981627183" />
<item Value="-0.978147601" />
<item Value="-0.974370065" />
<item Value="-0.970295726" />
<item Value="-0.965925826" />
<item Value="-0.961261696" />
<item Value="-0.956304756" />
<item Value="-0.951056516" />
<item Value="-0.945518576" />
<item Value="-0.939692621" />
<item Value="-0.933580426" />
<item Value="-0.927183855" />
<item Value="-0.920504853" />
<item Value="-0.913545458" />
<item Value="-0.906307787" />
<item Value="-0.898794046" />
<item Value="-0.891006524" />
<item Value="-0.882947593" />
<item Value="-0.874619707" />
<item Value="-0.866025404" />
<item Value="-0.857167301" />
<item Value="-0.848048096" />
<item Value="-0.838670568" />
<item Value="-0.829037573" />
<item Value="-0.819152044" />
<item Value="-0.809016994" />
<item Value="-0.79863551" />
<item Value="-0.788010754" />
<item Value="-0.777145961" />
<item Value="-0.766044443" />
<item Value="-0.75470958" />
<item Value="-0.743144825" />
<item Value="-0.731353702" />
<item Value="-0.7193398" />
<item Value="-0.707106781" />
<item Value="-0.69465837" />
<item Value="-0.68199836" />
<item Value="-0.669130606" />
<item Value="-0.656059029" />
<item Value="-0.64278761" />
<item Value="-0.629320391" />
<item Value="-0.615661475" />
<item Value="-0.601815023" />
<item Value="-0.587785252" />
<item Value="-0.573576436" />
<item Value="-0.559192903" />
<item Value="-0.544639035" />
<item Value="-0.529919264" />
<item Value="-0.515038075" />
<item Value="-0.5" />
<item Value="-0.48480962" />
<item Value="-0.469471563" />
<item Value="-0.4539905" />
<item Value="-0.438371147" />
<item Value="-0.422618262" />
<item Value="-0.406736643" />
<item Value="-0.390731128" />
<item Value="-0.374606593" />
<item Value="-0.35836795" />
<item Value="-0.342020143" />
<item Value="-0.325568154" />
<item Value="-0.309016994" />
<item Value="-0.292371705" />
<item Value="-0.275637356" />
<item Value="-0.258819045" />
<item Value="-0.241921896" />
<item Value="-0.224951054" />
<item Value="-0.207911691" />
<item Value="-0.190808995" />
<item Value="-0.173648178" />
<item Value="-0.156434465" />
<item Value="-0.139173101" />
<item Value="-0.121869343" />
<item Value="-0.104528463" />
<item Value="-0.087155743" />
<item Value="-0.069756474" />
<item Value="-0.052335956" />
<item Value="-0.034899497" />
<item Value="-0.017452406" />
</List>
<method name="sin" return="double">
<param name="x" type="double" />
<![CDATA[//@cmember sin
//@param double | x | Angle in degrees
//@return double | sin(x)
//@version Andrew Griffin | 10-09-02 16:30 |

return SinTable[ ((double)x.round()) % 360 ].Value;]]>
</method>
<method name="cos" return="double">
<param name="x" type="double" />
<![CDATA[//@cmember cos
//@param double | x | Angle In Degrees
//@version Andrew Griffin | 10-09-02 16:30 |
//@return double | cos(x)
//@i        Calculate the cosine of the angle (in degrees)

double ang = 90-x.round();
return SinTable[ ang % 360 ].Value;]]>
</method>
</static>
<return>
<rmeth name="setTo" cls="aPoly" />
<rmeth name="addPoint" cls="aPoly" />
<rmeth name="addLine" cls="aPoly" />
<rmeth name="addRectangle" cls="aPoly" />
<rmeth name="addSector" cls="aPoly" />
<rmeth name="projectFlatTo3D" cls="aPoly" />
<rmeth name="resetPoints" cls="aPoly" />
<rmeth name="sin" cls="double" />
<rmeth name="cos" cls="double" />
</return>
</class>
