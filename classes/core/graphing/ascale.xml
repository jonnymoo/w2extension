<class name="aScale" fauthor="$Author: Andrew.g $" fdate="$Date: 13/09/02 16:30 $" frevision="$Revision: 1 $">
<members>
<Double name="orgX" />
<Double name="orgY" />
<Double name="orgZ" />
<Double name="scaleX" />
<Double name="scaleY" />
<Double name="scaleZ" />
<method name="setTo" return="aScale">
<param name="x" type="double" />
<param name="y" type="double" />
<param name="z" type="double" />
<param name="x2" type="double" />
<param name="y2" type="double" />
<param name="z2" type="double" />
<param name="nx" type="double" />
<param name="ny" type="double" />
<param name="nz" type="double" />
<param name="nx2" type="double" />
<param name="ny2" type="double" />
<param name="nz2" type="double" />
<![CDATA[//@cmember setTo
//@param double | x | new left border
//@param double | y | new top border
//@param double | z |
//@param double | x2 | new right border
//@param double | y2 | new bottom border
//@param double | z2 |
//@param double | nx | Width of new virtual view
//@param double | ny | Height of new virtual view
//@param double | nz |
//@param double | nx2 |
//@param double | ny2 |
//@param double | nz2 |
//@return aScale |
//@version Andrew Griffin | 12-09-02 13:43 |

if (nx2==null)
{
    orgX = x;
    orgY = y;
    if (orgZ!=null) orgZ = z;

    scaleX = (x2-x)/(double)nx;
    scaleY = (y2-y)/(double)ny;
    if (z!=null || z2!=null) scaleZ = (z2-z)/(double)nz;
}
else
{
    // nx --> x
    // nx2 --> x2

    // np = x + (p-nx / (nx2-nx)) * (x2-x))

    // np = x + (p-nx) * (x2-x) / (nx2-nx)
    // np = x + (p*x2 - p*x - nx*x2 + nx*x) / (nx2-nx)
    // np = x + p*(x2-x) / (nx2-nx) + nx*(x-x2) / (nx2-nx)

    // np = (x+nx*(x-x2)/(nx2-nx))  +  p*(x2-x)/(nx2-nx)

    orgX = x + nx*(x-x2)/(double)(nx2-nx);
    scaleX = (x2-x)/(double)(nx2-nx);

    orgY = y + ny*(y-y2)/(double)(ny2-ny);
    scaleY = (y2-y)/(double)(ny2-ny);

    if (z!=null)
    {
        orgZ = z + nz*(z-z2)/(double)(nz2-nz);
        scaleZ = (z2-z)/(double)(nz2-nz);
    }
}

return this;]]>
</method>
<method name="scaleX" return="double">
<param name="x" type="double" />
<![CDATA[//@cmember scaleX
//@param double | x |
//@return double |
//@version Andrew Griffin | 12-09-02 10:25 |

return orgX + x*scaleX;]]>
</method>
<method name="scaleY" return="double">
<param name="y" type="double" />
<![CDATA[//@cmember scaleY
//@param double | y |
//@return double |
//@version Andrew Griffin | 12-09-02 10:25 |

return orgY + y*scaleY;]]>
</method>
<method name="scaleZ" return="double">
<param name="z" type="double" />
<![CDATA[//@cmember scaleZ
//@param double | z |
//@return double |
//@version Andrew Griffin | 12-09-02 10:46 |

if (z==null) return null;

return orgZ + z*scaleZ;]]>
</method>
<method name="getStandardScalerX" return="double">
<param name="firstScaler" type="aScale" />
<![CDATA[//@cmember getStandardScalerX
//@param aScale | firstScaler |
//@return double | Multiplier to bring scale back to 0 -> 1 for entire image width
//@version Andrew Griffin | 12-09-02 16:22 |

double fMul = firstScaler.scaleX;

return fMul/scaleX;]]>
</method>
<method name="getStandardScalerY" return="double">
<param name="firstScaler" type="aScale" />
<![CDATA[//@cmember getStandardScalerY
//@param aScale | firstScaler |
//@return double | Multiplier to bring scale back to 0 -> 1 for entire image width
//@version Andrew Griffin | 12-09-02 16:22 |

double fMul = firstScaler.scaleY;

return fMul/scaleY;]]>
</method>
</members>
<static />
<return>
<rmeth name="setTo" cls="aScale" />
<rmeth name="scaleX" cls="double" />
<rmeth name="scaleY" cls="double" />
<rmeth name="scaleZ" cls="double" />
<rmeth name="getStandardScalerX" cls="double" />
<rmeth name="getStandardScalerY" cls="double" />
</return>
</class>
