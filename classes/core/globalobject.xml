<class name="globalObject" fauthor="$Author: David.salter $" fdate="$Date: 2/05/03 10:31 $" frevision="$Revision: 13 $">
<members />
<static>
<method name="getMemberIndex" return="int">
<param name="obj" type="object" />
<param name="mName" type="string" />
<![CDATA[//@cmember getMemberIndex
//@param object | obj | Object to retrieve member index from
//@param string | mName | Name of member to retrieve idex of
//@return int | Index of member 'mName' from object 'obj' or -1
//@version Andrew Griffin | 24-08-01 10:20 |

object cls = &obj.class();  // so it works with lists too
int mx = cls.MemberCount();

for (int i=0; i<mx; i++)
  if (cls.MemberDef( i ).Name().eq( mName )) return i;

return -1;]]>
</method>
<method name="getKeySQLWhere" return="string">
<param name="obj" type="object" />
<![CDATA[//@cmember getKeySQLWhere
//@param object | obj | Object to retrieve SQL where based on key fields
//@return string | The SQL where clause to select the passed in object
//@version Andrew Griffin | 27-09-01 10:26 |

if (!obj.isObject()) return "";

int mx = obj.MemberCount();

string sql;

for (int i=0; i<mx; i++)
  if (obj.MemberDef(i).GetAttr( "Key" ) == "Y") {
    sql.addtoken(
        obj.MemberDef(i).SQLName() + " = " + obj.GetMember( i ).sql(),
        " AND "
    );
  }

return sql;]]>
</method>
<method name="DCHstampMods" return="int">
<param name="obj" type="object" />
<param name="modType" type="string" />
<param name="modDate" type="date" />
<![CDATA[//@cmember DCHstampMods
//@param object | obj | Object to be stamped with modTime, user & date
//@param string | modType | "I", "U", or "D"
//@param date | modDate | Optional date to assign to obj.modDate
//@return int | True if the object was successfully tagged
//@version Andrew Griffin | 27-09-01 12:12 |
//@version Simon Carroll | 31-01-02 12:05 |
//@i

int useDCH = obj.class().GetAttr( "sqlhasdch" )!="";

int ProcAppt = 0;

if (!UseDCH) //Check to see if process or appointment in order to see whether they need to be updated
{
    If (Obj.HasMethod("UseModDate"))
    {
        ProcAppt = Obj.UseModDate();
        useDCH = 1;
    }
}

//There may also be other fields that will need to be updated with the server time
if( Obj.HasMethod("DBChange"))
    Obj.DBChange(modtype);


if (useDCH)
{
    If (!ProcAppt)
        obj.modType = modType;

    obj.modDate = ( modDate!=null ? modDate : global::GetTimeFromServer() );
    obj.modUser = classes::core::global::UserID;
    return 1;
}

return 0;]]>
</method>
<method name="showChanges" return="string">
<param name="caption" type="string" />
<param name="oldObj" type="object" />
<param name="newObj" type="object" />
<![CDATA[//@cmember showChanges
//@param string | caption |
//@param object | oldObj |
//@param object | newObj |
//@return string |
//@version Andrew Griffin | 19-12-01 13:09 |
//@i

// changed ?
string tmps;
for (int i=0; i<oldObj.membercount(); i++)
{
    if (!oldObj.Getmember(i).IsList() &&
        !oldObj.GetMember(i).IsObject() &&
        oldObj.GetMember(i) != newObj.GetMember(i)
    )
        tmps += oldObj.getMemberDef(i).Description() + ": \t" + oldObj.getMember(i).dispText() + " ->\t" + newObj.getMember(i).dispText() + "\r\n";
}

if (tmps && (caption==null || caption))
{
    message( tmps,
             caption==null?"Object Differences":caption
    );
}

return tmps;]]>
</method>
<method name="checkStringBounds" return="int">
<param name="obj" type="object" />
<![CDATA[//@cmember checkStringBounds
//@param object | obj |
//@return int | -1 if all ok, otherwise the index of the first offending member
//@version Andrew Griffin | 22-01-02 14:49 |

//@e int membIdx = classes::core::globalObject::checkStringBounds( R );
//@e if (membIdx>=0) {
//@e     Err = R.User_Name + "'s " + R.MemberDef( membIdx ).Description() +
//@e           " is longer than " + R.MemberDef( membIdx ).getAttr("size") + " characters";
//@e }


for (int i=0;; i++) {
    memberdef md = &obj.MemberDef( i );
    if (md==null) break;

    if (md.ClassName().eq("String")) {
        int size = md.getAttr( "size" ).val();
        if (!size) continue;
        if (obj.GetMember( i ).length() > size) return i;
    }
}

return -1;]]>
</method>
<method name="blobToObject" return="object">
<param name="b" type="blob" />
<![CDATA[//@cmember blobToObject
//@param blob | b | Blob to de-serialize to an object
//@return object | The object or null if it fails
//@version Andrew Griffin | 30-01-02 16:03 |
//@i

xml x = &b.getXML2();
if (x==null) return null;

string clsName = x[0].cls;
string filename = sys::makefullname( classes::cpickn::path(), clsName )+".xml";

object load = &b.getObjects( filename );
if (load==null) return null;

return load[0];]]>
</method>
<method name="GetKeyField">
<param name="Obj" type="object" />
<![CDATA[//@cmember GetKeyField
//@param object | Obj |
//@version David Salter | 23-04-03 14:51 |
//@i
if (!obj.isObject()) return "";

int mx = obj.MemberCount();

string strKeyField="";

for (int i=0; i<mx; i++)
{
  if (obj.MemberDef(i).GetAttr( "Key" ) == "Y")
  {
    strKeyField = obj.MemberDef(i).SQLName();
    break;
  }
}

return strKeyField;]]>
</method>
<method name="GetUpdateSQL">
<param name="Obj" type="object" />
<![CDATA[//@cmember GetUpdateSQL
//@param
//@return
//@version David Salter | 02-05-03 10:30 |
//@i
if (!obj.isObject()) return "";

int mx = obj.MemberCount();

string sql="update ";
sql += obj.Class().GetAttr("SQLName" );
int bClause=0;
int bWhereClause = 0;
String strWhere = " where ";

for (int i=0; i<mx; i++)
{
  if (obj.MemberDef(i).GetAttr( "Key" ) != "Y")
  {
    if (( obj.MemberDef(i).SQLName() != "~" ) && ( !obj.Getmember(i).IsList()) && ( !obj.Getmember(i).IsObject()))
    {
        if ( bClause != 0 )
            sql += ", ";
        else
            sql += " set ";

        sql += obj.MemberDef(i).SQLName()+"="+obj.GetMember(i).sql();

        bClause = 1;
    }
  }
  else
  {
    if ( bWhereClause == 0 )
    {
        String strTemp;
        strTemp = obj.MemberDef(i).SQLName()+"="+obj.GetMember(i).sql();
        strWhere += strTemp;
        bWhereClause=1;
    }
    else
    {
        String strTemp;
        strTemp = " and " + obj.MemberDef(i).SQLName()+"="+obj.GetMember(i).sql();
        strWhere += strTemp;
    }
  }

}

return sql+strWhere;]]>
</method>
<method name="GetKeyFieldValue">
<param name="Obj" type="object" />
<![CDATA[//@cmember GetKeyFieldValue
//@param object | Obj |
//@version David Salter | 23-04-03 14:51 |
//@i
if (!obj.isObject()) return "";

int mx = obj.MemberCount();

string strKeyValue;

for (int i=0; i<mx; i++)
{
  if (obj.MemberDef(i).GetAttr( "Key" ) == "Y")
  {
    strKeyValue = obj.GetMember( i ).sql();
    break;
  }
}

return strKeyValue;]]>
</method>
<method name="GetSelectSQL">
<param name="Obj" type="object" />
<![CDATA[//@cmember GetSelectSQL
//@param object | Obj |
//@version David Salter | 02-05-03 09:45 |
//@i
if (!obj.isObject()) return "";

int mx = obj.MemberCount();

string sql="select ";
string strWhere="";
int bClause=0;
for (int i=0; i<mx; i++)
{
    if (( obj.MemberDef(i).SQLName() != "~" ) && ( !obj.Getmember(i).IsList()) && ( !obj.Getmember(i).IsObject()))
    {
        if ( bClause != 0 )
            sql += ", ";

        sql += obj.MemberDef(i).SQLName();

        bClause = 1;
    }
    else
    {
        if ( bClause != 0 )
            sql += ", ";

        sql += "NULL";

        bClause = 1;
    }
}

String strFrom = " from " + obj.Class().GetAttr("SQLName" );
strFrom += " ";
strFrom += obj.Class().GetAttr("SQLALias");

return sql+strFrom;]]>
</method>
</static>
<return>
<rmeth name="getMemberIndex" cls="int" />
<rmeth name="getKeySQLWhere" cls="string" />
<rmeth name="DCHstampMods" cls="int" />
<rmeth name="showChanges" cls="string" />
<rmeth name="checkStringBounds" cls="int" />
<rmeth name="blobToObject" cls="object" />
</return>
</class>
