<form name="toPrinter" base="toBase" fauthor="$Author: Andrew.b $" fdate="$Date: 20/08/01 15:50 $" frevision="$Revision: 1 $">
<members>
<Object name="output" cls="blob" />
<method name="writeTitle">
<param name="title" type="string" />
<![CDATA[//@cmember writeTitle
//@param string | title | the required title
//@version Andrew.b | 08-08-01 16:39 | 

output.write("\\pard\\s0\\tx1440\\ql\\plain\\f0\\cf0\\fs24\\b ");
output.write(title);
output.write("\\b0\\par");
]]>
</method>
<method name="writeBreak">
<param name="text" type="string" />
<![CDATA[//@cmember writeBreak
//@param string | text | an exml tag contain a caption attribute
//@version Andrew.b | 08-08-01 16:50 | 
//@i Writes a line of text to the member output.  If a table is started.  the table will be complted.

output.Write("\\par");
]]>
</method>
<method name="writeText">
<param name="text" type="string" />
<![CDATA[//@cmember writeText
//@param string | text | an exml tag contain a caption attribute
//@version Andrew.b | 08-08-01 16:44 | 
//@i Writes a line of text to the member output.  If a table is started.  the table will be complted.

string sText = "" + text;
sTExt = sText.replace("\n","\\par ");

output.Write("\\pard\\s0\\tx1440\\ql\\plain\\f0\\cf0\\fs18 ");
output.Write(sText+"");
output.Write("\\par");
]]>
</method>
<method name="writeList">
<param name="theList" type="list" />
<param name="excludeHeaders" type="int" />
<param name="width" type="int" />
<![CDATA[//@cmember writeList
//@param list | theList | 
//@param int | excludeHeaders | 
//@param int | width | 
//@version Andrew.b | 09-08-01 11:37 | 
//@i

// Does the list contain data
if (theList.count()<1)
    return(1);

// Count the number of columns
object firstRow = theList[0];
int noCols=0;
for (int nMember=0;; nMember++)
{
    if (firstRow.getMember(nMember)==null) break;
    noCols++;

}


// Write columns

int nTotalWidth=8308;

if (width!=null)
{
    if (width>100) width=100;
    nTotalWidth = (8308*width)/100;
}

int nColSize = nTotalWidth/(noCols);
output.write("\\trowd\\trleft0");

for (int nCol=1; nCol<=noCols; nCol++) 
    output.write("\\clvertalt\\cellx" + nColSize*nCol);


if (excludeHeaders==null || excludeHeaders!=1)
{
    // Draw Table headings
    string sRow="";
    for (nMember=0;; nMember++)
    {
        if (firstRow.getMember(nMember)==null) break;
        output.write("\\pard\\intbl\\s0\\tx1440\\ql\\plain\\f0\\cf0\\fs18\\f2\\cf5\\b " + firstRow.getMemberDef(nMember).name().upper() +"\\b0\\cell");      
    }    
    output.write("\\intbl\\row");  
}


// Draw table body    
for (int nRow=0; nRow<theList.count(); nRow++)
{
    object thisRow = theList[nRow];

    for (nMember=0;; nMember++)
    {
        if (thisRow.getMember(nMember)==null) break;
        output.write("\\pard\\intbl\\s0\\tx1440\\ql\\plain\\f0\\cf0\\fs18\\f2\\cf5 " + thisRow.getMember(nMember) +"\\cell");      
    }    

    output.write("\\intbl\\row");  // End of each row

}

// Write table footer
output.write("\\pard\\par"); 
]]>
</method>
<method name="init">
<![CDATA[//@cmember init
//@version Andrew.b | 09-08-01 12:40 | 
//@i

output.reset();

output.write("{\\rtf1\\ansi\\deflang1033\\ftnbj{\\fonttbl{\\f0\\fcharset0 \\fswiss Arial;}}{\\colortbl ;\\red255\\green255\\blue255 ;}{\\stylesheet{\\fs24\\cf5\\cb1\n"); 
output.write("Normal;}{\\cs1\\cf5\\cb1 Default Paragraph Font;}}\\paperw11908\\paperh16833\\margl1800\\margr1800\\margt1440\\margb1440\\headery720\\footery720\\formshade\\sectd\\marglsxn1800\n");
output.write("\\margrsxn1800\\margtsxn1440\\margbsxn1440\\headery720\\footery720\\sbkpage\\pgncont\\plain\\f0\\cf0\\fs24");
]]>
</method>
<method name="finish">
<![CDATA[//@cmember finish
//@version Andrew.b | 09-08-01 12:41 | 
//@i

output.write("}");

open();
show(0);

editor.setText(output);
editor.Print(1);
close();]]>
</method>
</members>
<static>
<method name="main">
<![CDATA[//@cmember main
//@version Andrew.b | 08-08-01 16:54 | 
//@i

classes::client::document theList[];

for (int nRow=0; nRow<10; nRow++)
{
    object newRow = theList.createRow();
    newRow.docNo = nRow;
}

toRTF thisRTF;
thisRTF.writeHeader();
thisRTf.writeTitle("Hello there");
thisRTF.writeText("GHgifisdfisfh ksjdhfiusgh kdfhsia \n");
thisRTF.writeList(theLIst);
thisRTF.writeFooter();

thisRTF.open();
thisRTF.editor.setText(thisRTF.output);]]>
</method>
</static>
<grid>
<row>
<col align="WH">
<RTFEditor name="editor" text="RTFEditor" />
</col>
</row>
</grid>
</form>
