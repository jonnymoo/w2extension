<form name="WXMLviewer" caption="Object Debugger" savepos="XMLDebugViewer" bk="D4D0C8" margin="2" acceptfiles="1" hidden="1" topmost="1" esccancel="1" fauthor="$Author: Chris Moran $" fdate="$Date: 8 12 03 11:41 $" frevision="$Revision: 2 $">
<members>
<List name="Hier" cls="aDataRow" />
<List name="HierShow" cls="aDataRow" />
<Integer name="hideEmpty" />
<method name="openXML">
<param name="X" type="xml" />
<param name="par" type="form" />
<![CDATA[//@cmember openXML
//@param xml | X |
//@param form | par |
//@version Andrew Griffin | 23-04-02 16:06 |

//
// show object name & type

idType.setText( X.cls );
idName.setText( X.name );

//
// populate object members...

for (int i=0; i<X.count(); i++)
{
    aDataRow r = &hier.CreateRow();

    r.X.AddElement( X[i] ); // pointer to actual xml

    r.name = x[i].name;
    r.typ = x[i].Tag();

    switch (r.typ.lower())
    {
      case "object":
        r.icon = "classes::des::iobject.bmp";
        r.typ = x[i].cls;
        r.addr = x[i].addr;
        r.val = "<" + r.addr + ">";
        break;

      case "list":
        r.icon = "classes::des::ilist.bmp";
        r.typ = x[i].cls + "[" + x[i].rows + "]";
        r.addr = x[i].addr;
        r.val = "<" + x[i].addr + ">";
        break;

      case "int", "integer":
        r.icon = "classes::des::h123.bmp";
        if (x[i].Count()) r.val = x[i][0].Content();
                     else r.col = sys::RGB( 128, 128, 128 );
        break;

      case "string":
        r.icon = "classes::des::habc.bmp";
        if (x[i].Count()) r.val = x[i][0].Content();
                     else r.col = sys::RGB( 128, 128, 128 );
        break;

      case "double", "float", "date":
        r.icon = "classes::des::hfloat.bmp";
        if (x[i].Count()) r.val = x[i][0].Content();
                     else r.col = sys::RGB( 128, 128, 128 );
        break;

      case "xml":
        r.icon = "classes::des::habc.bmp";
        r.val = "<" + x[i].xmltag + " "
                    + x[i].xmlattrs +
                ">";
        if (x[i].elements!="0")
            r.val += " ... ";
        r.val += "</" +  x[i].xmltag + ">";
        r.addr = x[i].addr;

        break;
    }

    r.typShort = r.typ.substring( r.typ.lastindexof( ":" )+1 );
}

open();
setParent( par );
setText( "Debug: " + X.name );

hideEmpty = staticHideEmpty;

refreshList();

show(1);
//SizeAdjust();]]>
</method>
<method name="refreshList">
<![CDATA[//@cmember refreshList
//@param
//@return
//@version Andrew Griffin | 09-05-02 15:43 |
//@i

idColumnList.SetList( null );

classes::core::global::copyList( hier, HierShow );
if (hideEmpty)
{
    HierShow.SelectMatchingRows( "val", "" );
    HierShow.DeleteSelections();
}

idColumnList.SetList( HierShow );
idColumnList.CalcWidths();

int w = idColumnList.getBestWidth(),
    h = idColumnList.getBestHeight();

if (h>440) h=440;

idColumnList.setw( w+24 );
idColumnList.seth( h+24 );

SizeFormToContent();

idColumnList.setw( 128 );
idColumnList.seth( 64 );

classes::core::globalForm::moveIntoFullView( this );]]>
</method>
<method name="onDblClick">
<![CDATA[//@cmember onDblClick
//@version Andrew Griffin | 24-05-02 16:10 |
//@i

aDataRow row = &hierShow.CurrentRow();
if (!row.addr) return;

string addr = row.addr;
string typ  = row.typ;
string name = row.name;

xml x = &row.X[0];

if (x.tag().eq("list"))
{
    classes::core::wpopupmenu p;
    int mx = x.rows.val();
    for (int i=0; i<mx; i++)
        p.Add( "row " + i, "" + i );
    string c = p.track(1);
    if (!c) return;
    addr = x[c.val()].addr;
    typ  = typ.gettoken(0,"[");
    name = name + "[" + c + "]";
}

form win = &sys::FindWindow( addr );
if (win!=null)
{
    win.Show( 1 );
    win.ToTop();
    return;
}

des::wclassview par = &getParent();
if (par == null) return;

par.debugVDesc.setTo( idName.getText() + "->" + name, typ, addr );
Sys::HWNDSendIPC( par.debugHwnd, par.GetHWND(), addr );]]>
</method>
<method name="doHideEmpty">
<![CDATA[//@cmember doHideEmpty
//@version Andrew Griffin | 19-04-02 16:10 |
//@i

staticHideEmpty = hideEmpty;
refreshList();]]>
</method>
</members>
<static>
<Integer name="staticHideEmpty" constval="1" />
<method name="browseObjectXML">
<param name="X" type="XML" />
<param name="name" type="string" />
<param name="par" type="form" />
<![CDATA[//@cmember browseObjectXML
//@param XML | X |
//@param string | name |
//@param form | par |
//@version Andrew Griffin | 23-04-02 16:37 |
//@i

if (X==null) {
    message("Error: object empty");
    return;
}

if (!X.cls) // XML...
{
    classes::core::xml::globalxml::BrowseXML( X[0][0] );
    return;
}

WXMLviewer WX;
WX.openXML( X, par );
WX.SetWindowName( name );]]>
</method>
</static>
<grid>
<row>
<col />
<col />
<col />
</row>
<row>
<col />
<col lpad="4" tpad="8" rpad="4" bpad="4" align="WH">
<grid>
<row>
<col rpad="8" align="H">
<Label name="idType" text="Type" tx="0,98,98" size="8" />
</col>
<col rpad="8" align="WH">
<Label name="idName" text="Name" size="8" />
</col>
</row>
</grid>
</col>
<col />
</row>
<row>
<col />
<col tpad="4" bpad="4" align="WH">
<ListBox name="idColumnList" IsList="Y" list="Hier" ondoubleclick="onDblClick">
<row>
<col lpad="8" rpad="8">
<Label text="Icon" isimg="1" bind="icon" bksel="FFFFFF" />
</col>
<col rpad="8">
<Label text="Type" tx="128,128,128" bind="typShort" txsel="808080" bksel="FFFF80" />
</col>
<col rpad="8">
<Label text="Name" bind="name" txfield="col" bksel="FFFF80" />
</col>
<col>
<Label text="Val" tx="0,0,255" bind="val" txsel="0000FF" bksel="FFFF80" />
</col>
</row>
</ListBox>
</col>
<col />
</row>
<row>
<col />
<col bpad="4" align="RV">
<CheckBox text=" hide empty" bind="hideEmpty" v0="0" v1="1" onclick="doHideEmpty" />
</col>
<col />
</row>
</grid>
</form>
