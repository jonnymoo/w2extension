<class name="W2Parser" savepos="localParsePos" margin="0" sizeable="0" toolwindow="1" hidden="1" topmost="1" thinframe="1" nocaption="1" fauthor="$Author: Chris Moran$" fdate="$Date: 8 12 03 11:37$" frevision="$Revision: 2$">
<members>
<String name="script" />
<List name="vars" cls="avar" />
<List name="vars2" cls="avar" />
<Integer name="max" />
<Integer name="p" />
<method name="getLocals">
<param name="scriptTxt" type="string" />
<![CDATA[//@cmember getLocals
//@param string | scriptTxt |
//@version Andrew Griffin | 28-11-01 10:12 |
//@version Andrew | 26-01-02 17:22 |
//@version Andrew Griffin | 19-02-02 09:21 |
//@version Jonathan.Muir | 07-09-19 17:09 |
//@i

//string script;
string s = scriptTxt.padSource();
if(s != script)
{
    int p = 0;
    script = s;
    max = script.length();
    vars2.reset();

    getLocScope( 0, null );

    for (int v=vars2.Count()-1; v>=0; v--) {
        if (!vars2[v].outp) vars2[v].outp = max+2000;    // record out of scope
    }

    vars.reset();
    vars2.MoveAllTo( vars );    // Swap over local variable lists...
}

return vars;]]>
</method>
<method name="getLocScope">
<param name="scop" type="int" />
<param name="fonly" type="int" />
<![CDATA[//@cmember getLocScope
//@param int | scop |
//@param int | fonly |
//@version Andrew Griffin | 28-11-01 10:12 |
//@version Andrew | 25-01-02 11:03 |
//@version Andrew Griffin | 13-02-02 11:59 |
//@version Jonathan.Muir | 07-09-19 17:10 |
//@i

// type def begins after { } ( ) ; :
//   terminated by a space or carrage return
// var name then begins with an alpha char
//   terminated by a non alphanumeric char
//   if next char is a , then resume with same type def, else not...

int mode, typP;
string typ, sRng;

while (p<max) {

    if (!mode)          sRng = "!~";                // var Type
    else if (mode==1)   sRng = "!~";                // var Name
    else if (mode==2)   sRng = "(){{}}:;,,";          // after var Name...
    else                sRng = "(){{}};;";          // skip type

    p = script.findCharInRange( sRng, p );   // beginning of typedef...
    if (p==-1) return 0;
    int c = script.charAt(p);

    switch (c) {

    case ';', ':' :
        mode = 0;
        break;

    case ',' :
        if (mode == 2) mode = 1; else mode = 3;
        break;

    case '(' :
        p++;
        int ret2 = getLocScope( scop, 1 );
        if (ret2!=')') return ret2;   // bracket mismatch...
        if (mode==1) mode = 3;
        break;

    case '{' :
        p++;
        int varl = vars2.Count();
        int ret = getLocScope( scop+1, null );
        if (ret!='}') return ret;   // bracket mismatch...
        for (int v=vars2.Count()-1; v>=varl; v--)
            if (!vars2[v].outp) vars2[v].outp = p;    // record out of scope
        mode = 0;
        break;

    case ')', '}' :
        return c;

    default :
        if ( c<'A' || c>'Z' && c<'_' || c>'_' && c<'a' || c>'z') {
            if (mode == 0) mode = 3;
            else if (mode == 1) mode = 2;
            break;
        }

        int i = script.findCharNotInRange( "azAZ09::__[[]]", p+1 );
        if (i==-1) i = max;
        string token = script.substring( p, i );

        if (::advSearch::checkKeyword( token )) { p = i-1; mode = 3; break; }

        if (!mode)
        {
            if (i<max) {
                c = script.charAt(i);
                if (c!=' ' && c!='\r') { p = i-1; mode = 3; break; }
            }
            typP = p;
            typ = token;
            mode = 1;
            p = i-1;
            break;
        }

        avar nv;
        nv.type = typ;
        if (token.endswith( "[]" )) {
            token=token.left(token.length()-2);
            nv.isList = 1;
        }
        nv.name = token;
        nv.scope = scop;
        nv.defp = p;
        nv.typp = typP;
        vars2.AddRow( nv );
        p = i-1;

        mode = 2;   // await a comma... etc...
        break;

    }

    p++;
}

return 0;]]>
</method>
<method name="showVars">
<![CDATA[//@cmember showVars
//@param
//@return
//@version Andrew Griffin | 24-05-02 16:08 |
//@i

classes::core::wpopupmenu pp;
for (int i=0; i<vars.Count(); i++)
  pp.Add( vars[i].type + "\t" + vars[i].name );
pp.track(1);]]>
</method>
<method name="getVar" return="avar">
<param name="name" type="string" />
<param name="cpos" type="int" />
<![CDATA[//@cmember getVar
//@param string | name |
//@param int | cpos |
//@return avar |
//@version Andrew Griffin | 20-09-01 10:51 |
//@version Jonathan.Muir | 07-09-19 16:50 |
//@i

avar v = null;

for (int i=0; i<vars.Count(); i++) {
    v = &vars[i];
    if (cpos>=v.defp && cpos<=v.outp && v.name.eq( name )) {
        avar v2 = v;    // make copy to return out of lock
        return v2;
    }
}

return null;]]>
</method>
</members>
<static />
<return>
<rmeth name="getVar" cls="avar" />
</return>
</class>
