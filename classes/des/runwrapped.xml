<form name="runWrapped" caption="Class Wrapper" savepos="runWrappedPos" icon="runwrap.ico" margin="0" hidden="1" topmost="1" thinframe="1" fauthor="$Author: Chris Moran$" fdate="$Date: 8 12 03 11:41$" frevision="$Revision: 2$" notrace="1">
<members>
<Object name="focus" />
<Object name="Hier" cls="w2Debug::obFrm" />
<Integer name="toping" desc="Set to true if wrapper is a &quot;Top Window&quot;." />
<method name="OnWMCopyData" return="void">
<param name="cmd" type="string" />
<param name="val" type="int" />
<![CDATA[//@version Andrew Griffin | 04-02-02 14:35 |
//@i This is called when another designer is spawned by windows so that we can
//@i intercept them and relay them back through a single XRunApp Instance.

if (val==7729) {
  switch (cmd.lower()) {
    case "shutdown":
        doClose();
        break;

    case "showwrapper":
        Show( 1 );
        if (focus!=null) focus.SetForeground();
        break;

    case "refresh":
        doRefresh();
        break;

    case "areyouok":
        setTimer(0);
        return;
  }
}]]>
</method>
<method name="runThis">
<param name="cmd" type="string" />
<![CDATA[//@cmember
//@param string | cmd |
//@version Andrew Griffin | 31-01-02 09:56 |
//@version jonathan.muir | 16-02-10 16:40 |
//@version Jonathan.Muir | 23-03-10 14:41 |
//@version andrew.banyard | 21-05-15 17:07 |
//@i

sys::debugout("In Run This");
SetProp("RunWrap", 7729);

// Taskbar Icon Time...!
string fileName;
int idx = cmd.lastindexof("/");
if(idx==-1){
  idx = cmd.lastindexof("\\");
}

if(idx!=-1){
 fileName = cmd.substring(idx+1);
}

// This seems to crash with long strings D:
SetTaskBarIcon( "runWrap.ico", "Run Wrapper: " + fileName );

string runMethod;
int ri = cmd.indexof( "-run" );
if (ri>=0) {
    runMethod = cmd.subString( ri+5 );
    cmd = cmd.left( ri-1 );
}

cmd = sys::MakeRelativeName( path(), cmd );

int n = cmd.IndexOf(".xml",0,1);
if (n>=0) cmd = cmd.left( n );

//message( cmd + "\r\n" + path() );

if (cmd!=null && cmd) {

    object o = sys::LoadClass( cmd, path() );

    if (o==null) {
        message( "Unable to execute a class that is not located under\r\n" +
                 "the same 'classes' folder as the W2 Designer application\r\n" +
                 "itself",
                 "W2 Designer - Run Wrapper", classes::core::windows::MB_ICONASTERISK );
        close();
        return 0;
    }

    if (runMethod) {
        if (o.execMethod( runMethod )) return 1;
    } else
    if (o.HasMethod("main")) {
        o.main();
        return 1;
    }

    object i = o.CreateInstance();

    if (runMethod) {
        if (i.execMethod( runMethod )) return 1;
    } else
    if (i.HasMethod("start")) {
        i.start();
        return 1;
    } else
    if (i.isWindow()) {
        i.open();
        return 1;
    }

    message("Unable to open a class without a form", "W2 Designer", classes::core::windows::MB_ICONASTERISK);
    close();

    return 0;
}

return 1;]]>
</method>
<method name="doClose">
<![CDATA[//@version Andrew Griffin | 04-02-02 14:23 |
// Forced Close all

KillTimer();
focus = null;

int fidx;
while (1) {

    object w = sys::GetOpenWindow( fidx );
    if (w==null) break;
    if (w==this) {
        fidx++;
        continue;
    }

    w.close();
    sys::Wait(10);

}

close();]]>
</method>
<method name="onTimer">
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 27-05-02 14:50 |
//@i

if (focus!=null && !focus.isVisibleReally()) {
    focus = null;
//    message("Gone...");
}

if (sys::GetWindowCount()<=1) doClose();

form f = &sys::ActiveWindow();
if (f==null || f.hasMethod("w2AskClose") || f.GetAttr("notrace")) return;

if (focus!=null && focus == f) return;

focus.setmagicpointer( f );

string nam = sys::MakeRelativeName( path(), f.className() );

if (nam!=idName.getText())
{
    idName.setText( nam );
    SetTaskBarIcon( "runWrap.ico", "Run Wrapper: " + nam );
}]]>
</method>
<method name="doBrowse">
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

if (focus==null) return;

Hier.elements.reset();
Hier.addChild( focus );
Hier.elements[0].SetOpen( 1 );

//idHier.setVisible( 1 );
//SizeFormToContent();

/*
if (focus==null) return;

form f = &focus; //sys::GetOpenWindow(0);
//if (f == this) f = &sys::GetOpenWindow(1);

w2debug::wdebug::debug( f );

//classes::debug::ShowObj( f );]]>
</method>
<method name="w2askClose">
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

return 0;   // not allowed to close this window.]]>
</method>
<method name="doRefresh">
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 30-07-01 16:44 |
//@i

stringarray sa = null;
sa = &sys::getClassList();
string s;

// loop through cached classes

setwaitcursor();

for (int i=0; i<sa.count(); i++) {

    s = sa[i];
    if (s.indexOf("refresh")>=0) continue;
    if (s.indexOf("classes::des")>=0) continue;
    if (s.indexOf("classes\\des")>=0) continue;
    if (s.indexOf("classes/des")>=0) continue;

    int h = 0;
    for(int n=0;n<30;n++){
        // get next
        h = Sys::HWNDFindEx(0,h,"WFL32WNDCLASS","");
        if (!h) break;
        // send message
        Sys::HWNDSendIPC(h,911,s);
    }
}

message("Refresh Complete", "Refresh", classes::core::windows::MB_ICONINFORMATION );]]>
</method>
<method name="doEdit">
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

if (focus==null) return;

int mhWnd = sys::HWNDFind( "WFL32WNDCLASS", "" );

while (mhWnd!=0) {
    int i = Sys::HWNDGetProp(mhWnd, "ClsDes");
    if (i==7723) {
        sys::HWNDSendIPC( mHwnd, 7723, "Open:" + focus.class().classname()+".xml" );
        return;
    }
    mhWnd = sys::HWNDFindEx( null, mhWnd, "WFL32WNDCLASS", "" );
}]]>
</method>
<method name="onClose">
<param name="i" type="int" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

if (i!=null && i==911) return;

Show( 0 );

return;]]>
</method>
<method name="doTop" return="void">
<![CDATA[//@i Toggle Browser Window 'Stay on Top'

if (toping) {
    idTop.setAttr( "img", "browse::pinOUT.bmp" );
    SetTopMost(0);
    toping = 0;
} else {
    idTop.SetAttr( "img", "browse::pinIN.bmp" );
    SetTopMost(1);
    toping = 1;
}]]>
</method>
<method name="dokillWindow">
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 26-11-01 16:07 |
//@i

if (message( "Permanently Close Wrapper?", "Wrapper Prompt", classes::core::windows::MB_YESNO )
    == classes::core::windows::IDNO ) return 0;

killtimer();
close();]]>
</method>
<method name="doSnapshotOptions">
<![CDATA[//@cmember doSnapshotOptions
//@version Andrew Griffin | 24-05-02 16:04 |
//@i

classes::core::wpopupmenu p;

p.Add( "Create New Project", "PN" );

switch (p.track(1)) {
  case "PN":

    doBrowse();
    if (hier.elements.count()) {
        w2debug::obFrm ob = &hier.elements[0];
        ob.sendToProject( "CNP" );
    }
    break;
}]]>
</method>
<method name="OnTaskBarClick">
<![CDATA[//@cmember OnTaskBarClick
//@version Andrew Griffin | 11-07-02 14:06 |
//@i

classes::core::wpopupmenu p;

p.Add( "Show Run Wrapper", "S" );
p.AddSeparator();
p.Add( "Open Class in Designer", "O" );
p.AddSeparator();
p.Add( "Open Class Flusher", "F" );
p.AddSeparator();
p.Add( "Kill this Run Session", "X" );

switch (p.Track( 1 )) {

  case "S":
    Show( 1 );
    if (focus!=null) focus.SetForeground();
    break;

  case "O":
    doBrowse();
    if (hier.elements.count()) {
        w2debug::obFrm ob = &hier.elements[0];
        ob.sendToProject( "CSP" );  // create subtle project
    }
    doEdit();
    break;

  case "X":
    doClose();
    break;

  case "F":
    classes::core::wFlush::Go();
    break;

}

setTimer( 1500 );]]>
</method>
<method name="OnTaskBarRightClick">
<![CDATA[//@cmember OnTaskBarRightClick
//@version Andrew Griffin | 30-11-01 12:05 |
//@i

OnTaskBarClick();]]>
</method>
<method name="OnTaskBarDoubleClick">
<![CDATA[//@cmember OnTaskBarDoubleClick
//@version Andrew Griffin | 04-02-02 14:22 |
//@i

doBrowse();
if (hier.elements.count()) {
    w2debug::obFrm ob = &hier.elements[0];
    ob.sendToProject( "CSP" );  // create subtle project
}

doEdit();]]>
</method>
</members>
<static>
<method name="Main">
<param name="cmd" type="string" />
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 16-11-01 13:43 |
//@version andrew.banyard | 21-05-15 16:59 |
//@i Container class for running application

// Launch application 'cmd'

runWrapped rApp;
rApp.open();
rApp.SizeFormToContent();
rApp.toping = 1;

if (cmd!=null)
    if (!rApp.runThis( cmd )) return;

rApp.SetTimer( 1500 );]]>
</method>
<method name="Go">
<param name="cmd" type="string" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i Container class for running application

// attach run wrapper to the current xrunapp application

main( "" );]]>
</method>
<method name="closeDeadSessions">
<![CDATA[//@cmember closeDeadSessions
//@param
//@return
//@version Andrew Griffin | 04-02-02 14:34 |
//@i

// Close any crashed toolbar des apps.
int mhWnd = sys::HWNDFind( "WFL32WNDCLASS", "" );
while (mhWnd!=0) {
    int i = Sys::HWNDGetProp(mhWnd, "RunWrap");
    if (i==7729) {
        sys::HWNDSendIPC( mHwnd, 7729, "areYouOk" );
        return; // send open request and close this instance
    }
    mhWnd = sys::HWNDFindEx( null, mhWnd, "WFL32WNDCLASS", "" );
}]]>
</method>
</static>
<grid>
<row>
<col lpad="4" rpad="4" bpad="8" align="W">
<grid>
<row>
<col rpad="8">
<Label text="Active:" tx="128,0,0" />
</col>
<col lpad="4" rpad="4" align="W">
<Label name="idName" text="&gt;&gt;" />
</col>
</row>
</grid>
</col>
</row>
<row>
<col lpad="4" rpad="4" bpad="8" h="64" align="WH">
<Hierarchy name="idHier" text="Hierarchy" bind="Hier" />
</col>
</row>
<row>
<col h="2" align="WV" bk="128,0,0" imgtile="32" />
</row>
<row>
<col lpad="4" tpad="3" rpad="4" bpad="6" align="WV" imgtile="32">
<grid>
<row>
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label text="Take Snapshot" tx="255,255,255" onClick="doBrowse" txsel="FFFF00" style="b" OnRightClick="doSnapshotOptions" />
</col>
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label text="Open Class" tx="255,255,255" onClick="doEdit" txsel="FFFF00" style="b" />
</col>
<col align="WV" imgtile="32" />
<col w="28" align="CV">
<Image name="idTop" text="Image" img="browse::pinin.bmp" onClick="doTop" />
</col>
</row>
<row>
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label text="Reload Classes" tx="255,255,255" onClick="doRefresh" txsel="FFFF00" style="b" />
</col>
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label text="Kill Session" tx="255,255,255" onClick="doClose" style="b" txsel="FFFF00" />
</col>
<col align="C" />
<col align="CV" imgtile="32">
<Image text="Image" img="classes::resource::standard::blip_x.bmp" onClick="dokillWindow" />
</col>
</row>
</grid>
</col>
</row>
</grid>
<return>
<rmeth name="OnWMCopyData" cls="void" />
<rmeth name="doTop" cls="void" />
</return>
</form>
