<class name="clearcase" fauthor="$Author: $" fdate="$Date: $" frevision="$Revision: $">
<members>
<Object name="io_clearcase" cls="classes::com::comobject" />
<Object name="io_clearcaseview" cls="classes::com::comobject" />
<Object name="io_clearcaseactivity" cls="classes::COM::COMObject" />
<Object name="io_clearcasestream" cls="classes::COM::COMObject" />
<Integer name="ii_envSet" />
<Integer name="ccStatus" pick="statusLX" />
<String name="CCMessage" />
<String name="CCError" />
<String name="callBackWindow" sql="~" />
<method name="init">
<![CDATA[//@cmember init
//@version Richard.Talbot | 22-09-04 15:05 |
//@version Darren Ball | 08-02-06 09:47 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This method should be called whenever the class is instanced
   It attempts to connect to  clearcase automation libray
   Application Object and places it in an instance variable for
   use by other methods.

*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

this.ii_envset=0;

// Connect to Clearcase Automation Library COM Interface
if (this.io_clearcase.connect( "Clearcase.Application" ) < 0) {
    Error(this.io_clearcase);
    return -1  ;
}
return 1;]]>
</method>
<method name="getObject" return="object">
<param name="to_comobject" type="object" />
<param name="to_parentcomobject" type="object" />
<![CDATA[//@cmember getObject
//@param object | to_comobject |
//@param object | to_parentcomobject |
//@return object |
//@version Richard.Talbot | 22-09-04 15:05 |
//@version Tim.Simpson | 07-10-04 12:18 |
//@version Jonathan.Muir | 03-12-04 11:40 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This Method is called to retrieve a COM Object from a method call
   to a parent COM Object. This allows us to check if the method call was successful
   if it was the COMObject instance is returned otherwise null is returned.
   It saves us having to repeat this code all over the class.

   Arguments are the potential result of a method call to a COM Object to_comobject
   and the COM Object upon which the method was called
   if a COM Error is returned the value of to_comobject will be a negative long
   if this is the case this method attempts to report the error useing error()

*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

if (to_comobject.ClassName().EQ("INTEGER")) {
/*if a parent object was passed in attempt to throw an error message
using the lasterror message off the parent object
*/
    if(!to_parentcomobject.ClassName().EQ("INTEGER")) {
        Error(to_parentcomobject);
    }
    Return null;
}
Return to_comobject;]]>
</method>
<method name="error" return="int">
<param name="to_object" type="object" />
<![CDATA[//@cmember error
//@param object | to_object |
//@return int |
//@version Richard.Talbot | 29-09-04 11:11 |
//@version Tim.Simpson | 07-10-04 12:19 |
//@version Jonathan.Muir | 03-12-04 11:36 |
//@version Darren Ball | 08-02-06 09:14 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This Method is used display an error message it can be passed either a com object or a string
   as the argument to_object. if a COMObject is passed in it attempts to get the last error message from the
   COM Interface, if a String is passed its value is displayed as the error message.
   If any other type is passed a generic unknown error is displayed.
*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

string ls_lasterrorstring="";
if(to_object.isObject()) {

    if (to_object.ClassName()=="W2IDispatch") {
        ls_lasterrorstring= to_object.LastErrorString();
        if (ls_lasterrorstring =="") {
          ls_lasterrorstring="Unknown Error Occured in Clearcase Interface" ;
        }
    } else {
    ls_lasterrorstring="Unknown Error Occured in Clearcase Interface" ;
    }
} else {
    if(to_object.Classname()=="STRING") {
        ls_lasterrorstring= to_object  ;
    } else {
        ls_lasterrorstring="Unknown Error Occured in Clearcase Interface" ;
    }
}
CCMessage=ls_lasterrorstring;
UpdateStatusBar();
//message(ls_lasterrorstring,"Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
return 1 ;]]>
</method>
<method name="setClearCaseEnv" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember setClearCaseEnv
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 13:10 |
//@version Tim.Simpson | 25-10-04 10:37 |
//@version Ricky LEE | 21-10-05 09:30 |
//@version Darren Ball | 08-02-06 10:40 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This method attempts to determin the current clearcase view,stream and activity
   for the full file path passed in the ts_filename argument useing the ClearCase Automation Library.
   It stores these COM Objects as Instance variables.

   If succesful it sets the ii_envset variable to 1 which allows other methods to check if this method
   completed successfully

*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

this.ii_envset=0;

// Get userid   RGT is this the Network Domain qualified userid ?

//string ls_user =  classes::Core::Global::GetUserID();

//First Figure out what view we are in
classes::COM::COMObject lo_fileversion ;

//Is there a clearcase view?
object ccv = this.getObject(this.io_clearcase.view(ts_filename),this.io_clearcase);

//if we are in a valid view
if  (ccv!=null) {
    //if we are in a ucm view
    this.io_clearcaseview = ccv;

    if(this.io_clearcaseview.GetIsUCMView()) {
        //Set the view name for the designer taskbar
        // limit the size of the description displayed
        ccError = "View: " + this.io_clearcaseview.tagname();
        //find out our stream
        this.io_clearcasestream=this.getObject(this.io_clearcaseview.stream(),this.io_clearcaseview);
        if (this.io_clearcasestream!=null)
        {
            //find out current activity
            object cca = this.getObject(this.io_clearcaseview.CurrentActivity(),this.io_clearcaseview);
            if (cca!=null){
                this.io_clearcaseactivity = cca;
                ccError += "   Activity: "+this.io_clearcaseactivity.Headline();
                }
            else
                {
                // No Current Activity is set
                ccError += "   Activity: No activity set";
                }

        } else  {
                //not in a stream !!
                UpdateStatusBar();
                return -1 ;
                }
    } else {
        //    not in a UCM view !!!!
        UpdateStatusBar();
        return -1;
    }
} else {
    //could not determine view
    ccError = "View: Not present";
    UpdateStatusBar();
    return -1 ;
}
this.ii_envset=1;

/*if (ccError.length()>140)
{
    ccError = ccError.substring(0,120)+"...";
}
*/
// do a broadcast and pass the info
UpdateStatusBar();

return 1  ;]]>
</method>
<method name="getFileStatus" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember getFileStatus
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 13:10 |
//@version Jonathan.Muir | 03-12-04 11:45 |
//@version Darren Ball | 08-02-06 10:54 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This method attempts to discover the current Source Control State of a file
   Stored within ClearCase.
   It receives a single Argument the full path to file in question.
   (The path and filename MUST be the correct case due to ClearCase being
   Case Sensitive).
   It returns an integer Constant which defines the status:
     Contant       Value     Description
   CC_CHECKOUTRES    1      The file is Checked-out reserved
   CC_CHECKOUTUNRES  2      The file is Checked-out unreserved
   CC_CHECKEDIN      3      The file is Checked-in
   CC_HIJACKED       4      The file is Hijacked
   CC_VIEWPRIVATE    5      The file is Not under source control
   CC_CHECKEDOUTEXT  6      The File is Checked Out to someone else
                            or to a different view

   if an invalid argument is detected an error is displayed


*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


//check the argument is valid

if (!ts_filename.ClassName().eq("STRING")) {
    Error("Invalid Arguemnt sent to getFileStatus.");
    return -1;
}


//Has the ClearCase Environment been successfully checked
if (this.ii_envset==1) {
    classes::COM::COMObject lo_checkedoutfile ;
    classes::COM::COMObject lo_fileversion ;
    classes::COM::COMObject lo_checkedoutfileview ;
    //Get the version object of the requested file
    lo_fileversion=this.getObject( this.io_clearcase.version(ts_filename),this.io_clearcase);
    //if we could not get a valid veriosn object the file is not under CC control
    if (lo_fileversion==NULL||lo_fileversion.ClassName().EQ("INTEGER")) {
        //file is veiw private
        return CC_VIEWPRIVATE;
    }
    //if we have a valid fileverion object
    if (lo_fileversion!=null) {
        //check if fileversion is currently checked out
        if (!lo_fileversion.ischeckedout()) {
            //check if fileversion is hijacked
            if (lo_fileversion.ishijacked()) {
                //file is hi-jacked
                return CC_HIJACKED;
            }
        //file is checked in
        return CC_CHECKEDIN;
        } else {
            /*The fileversion is currently checked out. Find out if it is checked out to the current view
            by compareing the current view tagname stored on the io_clearcaseview instance variable
            (previously set up by a call to setClearCaseEnv())
            with the view tag of the checkedout file object */

            lo_checkedoutfile= this.getObject( this.io_clearcase.CheckedOutFile(ts_filename),this.io_clearcase);
            lo_checkedoutfileview= this.getObject( lo_checkedoutfile.ByView(),lo_checkedoutfile);
            if(lo_checkedoutfileview!=null) {
                string ls_myviewtagname  ="" ;
                string ls_checkedoutviewtagname="" ;
                ls_myviewtagname=   this.io_clearcaseview.tagname();
                ls_checkedoutviewtagname=lo_checkedoutfileview.tagname();
                //check if view tag names match
                if (ls_myviewtagname== ls_checkedoutviewtagname) {
                    //check the check out type
                    if (lo_checkedoutfile.isreserved()) {
                        //file is checked out reserved to current view
                        return CC_CHECKEDOUTRES;
                    } else {
                        //file is checked out unreserved to current view
                        return CC_CHECKEDOUTUNRES;
                    }
                } else {
                    //file is checked out to a different view
                    // This may need to be extended to check if it is reserved or unreserved
                    //Do we care ????
                    return CC_CHECKEDOUTEXT;
                }
            } else {
                // could not determin view of checkout file
                Error("Could not determine view of checkedout file.");
                return -1 ;
            }
        }
    } else {
        //unable to determine file version file not under source control
        //we should never get here we should return before we get here
        Error("Unable to determine file version.");
        return -1  ;
    }
} else {
    Error("ClearCase Environment was not set.");
    return -1;
}]]>
</method>
<method name="setMenuItems" return="int">
<param name="ti_status" type="object" />
<param name="to_parentform" type="object" />
<![CDATA[//@cmember setMenuItems
//@param object | ti_status |
//@param object | to_parentform |
//@return int |
//@version Richard.Talbot | 22-09-04 14:49 |
//@i
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/*
   Description:

   This method enables and disables menuitems on the clearcase menu
   dependant upon the status passed to the method in the ti_status argument
   use getFileStatus to determin the status of a file.

     Contant       Value     Description
   N/A               0      Disable all menu items
   CC_CHECKOUTRES    1      Show menuitems available when the file is Checked-out reserved
   CC_CHECKOUTUNRES  2      Show menuitems available when the file is Checked-out unreserved
   CC_CHECKEDIN      3      Show menuitems available when the file is Checked-in
   CC_HIJACKED       4      Show menuitems available when the file is Hijacked
   CC_VIEWPRIVATE    5      Show menuitems available when the file is Not under source control
   CC_CHECKEDOUTEXT  6      Show menuitems available when the File is Checked Out to someone else
                            or to a different view

   if invalid arguments are detected an error is displayed.
*/
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


if (to_parentform.isObject() && ti_status.ClassName().eq("INTEGER") ) {

    switch (ti_status) {

        case CC_CHECKEDOUTRES:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",1);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",0);
            to_parentform.enablemenuitem("ccchkin",1);
            to_parentform.enablemenuitem("ccchkout",0);
            to_parentform.enablemenuitem("ccundochkout",1);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",0);
            to_parentform.enablemenuitem("cchist",1);
            to_parentform.enablemenuitem("ccvertree",1);
            to_parentform.enablemenuitem("cccompprevver",1);
            to_parentform.enablemenuitem("ccpropver",1);
            to_parentform.enablemenuitem("ccpropelem",1);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case CC_CHECKEDOUTUNRES:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",1);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",0);
            to_parentform.enablemenuitem("ccchkin",1);
            to_parentform.enablemenuitem("ccchkout",0);
            to_parentform.enablemenuitem("ccundochkout",1);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",0);
            to_parentform.enablemenuitem("cchist",1);
            to_parentform.enablemenuitem("ccvertree",1);
            to_parentform.enablemenuitem("cccompprevver",1);
            to_parentform.enablemenuitem("ccpropver",1);
            to_parentform.enablemenuitem("ccpropelem",1);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case CC_CHECKEDIN:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",1);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",1);
            to_parentform.enablemenuitem("ccchkin",0);
            to_parentform.enablemenuitem("ccchkout",1);
            to_parentform.enablemenuitem("ccundochkout",0);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",1);
            to_parentform.enablemenuitem("cchist",1);
            to_parentform.enablemenuitem("ccvertree",1);
            to_parentform.enablemenuitem("cccompprevver",1);
            to_parentform.enablemenuitem("ccpropver",1);
            to_parentform.enablemenuitem("ccpropelem",1);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case CC_HIJACKED:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",1);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",0);
            to_parentform.enablemenuitem("ccchkin",0);
            to_parentform.enablemenuitem("ccchkout",1);
            to_parentform.enablemenuitem("ccundochkout",0);
            to_parentform.enablemenuitem("ccundohijack",1);
            to_parentform.enablemenuitem("cchijack",0);
            to_parentform.enablemenuitem("cchist",1);
            to_parentform.enablemenuitem("ccvertree",1);
            to_parentform.enablemenuitem("cccompprevver",0);
            to_parentform.enablemenuitem("ccpropver",0);
            to_parentform.enablemenuitem("ccpropelem",0);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case CC_VIEWPRIVATE:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",1);
            to_parentform.enablemenuitem("ccfindchecks",0);
            to_parentform.enablemenuitem("ccfileprop",1);
            to_parentform.enablemenuitem("ccupdate",0);
            to_parentform.enablemenuitem("ccchkin",0);
            to_parentform.enablemenuitem("ccchkout",0);
            to_parentform.enablemenuitem("ccundochkout",0);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",0);
            to_parentform.enablemenuitem("cchist",0);
            to_parentform.enablemenuitem("ccvertree",0);
            to_parentform.enablemenuitem("cccompprevver",0);
            to_parentform.enablemenuitem("ccpropver",0);
            to_parentform.enablemenuitem("ccpropelem",0);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case CC_CHECKEDOUTEXT:

            to_parentform.enablemenuitem("ccexplorer",1);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",1);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",1);
            to_parentform.enablemenuitem("ccchkin",0);
            to_parentform.enablemenuitem("ccchkout",1);
            to_parentform.enablemenuitem("ccundochkout",0);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",1);
            to_parentform.enablemenuitem("cchist",1);
            to_parentform.enablemenuitem("ccvertree",1);
            to_parentform.enablemenuitem("cccompprevver",1);
            to_parentform.enablemenuitem("ccpropver",1);
            to_parentform.enablemenuitem("ccpropelem",1);
            to_parentform.enablemenuitem("cchelp",1);
            break;

        case 0:

            to_parentform.enablemenuitem("ccexplorer",0);
            to_parentform.enablemenuitem("ccaddtosrcctrl",0);
            to_parentform.enablemenuitem("ccfindchecks",0);
            to_parentform.enablemenuitem("ccfileprop",0);
            to_parentform.enablemenuitem("ccupdate",0);
            to_parentform.enablemenuitem("ccchkin",0);
            to_parentform.enablemenuitem("ccchkout",0);
            to_parentform.enablemenuitem("ccundochkout",0);
            to_parentform.enablemenuitem("ccundohijack",0);
            to_parentform.enablemenuitem("cchijack",0);
            to_parentform.enablemenuitem("cchist",0);
            to_parentform.enablemenuitem("ccvertree",0);
            to_parentform.enablemenuitem("cccompprevver",0);
            to_parentform.enablemenuitem("ccpropver",0);
            to_parentform.enablemenuitem("ccpropelem",0);
            to_parentform.enablemenuitem("cchelp",0);
            break;
    }
    return 1;
} else {
    Error("Invalid Arguemnt sent to setMenuItems.");
    return -1;
}]]>
</method>
<method name="hijack" return="int">
<param name="ts_filename" type="string" />
<param name="to_parentform" type="object" />
<![CDATA[//@cmember hijack
//@param string | ts_filename |
//@param object | to_parentform |
//@return int |
//@version Richard.Talbot | 22-09-04 16:15 |
//@version Tim.Simpson | 28-09-04 16:04 |
//@version Richard.Talbot | 29-09-04 11:18 |


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        error("Unable to Set ClearCase UCM Environment");
        return -1;
    }
} else {


    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    return -1;
}

if (File::setReadOnly(ls_filename,0)==0) {

    Message(ls_filename+"\n"+"has been made made writeable but will not be Hijacked until it is Saved  ","ClearCase Source Control",
            classes::core::windows::MB_OK|classes::core::windows::MB_ICONINFORMATION);
    return 1;

} else {
    error("Unable Set File as Writeable");
    //message("Unable Set File as Writeable","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}]]>
</method>
<method name="checkOut" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember checkOut
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:27 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:18 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("cleardlg.exe /window $activewnd /windowmsg A065 /checkout "+ls_filename);


return 1;]]>
</method>
<method name="launchCCExplorer" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember launchCCExplorer
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:46 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:18 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","clearexplorer.exe",ls_filename,"")>32) {

    return 1;

} else {
    error("Unable to launch ClearCase Explorer");
    //message("Unable to launch ClearCase Explorer","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="addToSourceControl" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember addToSourceControl
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:50 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:21 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {

    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("cleardlg.exe /window $activewnd /windowmsg A065 /addtosrc "+ls_filename);

return 1;]]>
</method>
<method name="findcheckouts" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember findcheckouts
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:50 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:21 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {

    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","clearfindco.exe",ls_filename,"")>32) {

    return 1;

} else {

    error("Unable Launch ClearCase Find CheckOuts");
    message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="getFileProperties" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember getFileProperties
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:50 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:21 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {

        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if(Sys::ShellExecute("","cleardescribe.exe",ls_filename,"")>0) {

    return 1;

} else {
    error("Unable Launch ClearCase Describe");
    //message("Unable Launch ClearCase Describe","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="update" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember update
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:50 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:34 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
     error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("clearviewupdate.exe -pname "+ls_filename);

return 1;]]>
</method>
<method name="checkIn" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember checkIn
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:52 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
     error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("cleardlg.exe /window $activewnd /windowmsg A065 /checkin "+ls_filename);



return 1;]]>
</method>
<method name="undoHiJack" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember undoHiJack
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:52 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("clearviewupdate.exe -unhijack -pname "+ls_filename);



return 1;]]>
</method>
<method name="undoCheckOut" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember undoCheckOut
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:52 |
//@version Tim.Simpson | 28-09-04 16:06 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

sys::executeandwait("cleardlg.exe /window $activewnd /windowmsg A065 /uncheckout "+ls_filename);


return 1;]]>
</method>
<method name="gethistory" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember gethistory
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:52 |
//@version Tim.Simpson | 28-09-04 16:07 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if(Sys::ShellExecute("","clearhistory.exe",ls_filename,"")>0) {

    return 1;

} else {
    error("Unable Launch ClearCase Find CheckOuts");
    //message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="getVersionTree" return="int">
<param name="ts_filename" type="ts_filename" />
<![CDATA[//@cmember getVersionTree
//@param ts_filename | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:54 |
//@version Tim.Simpson | 28-09-04 16:14 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","clearvtree.exe",ls_filename,"")>32) {


    return 1;

} else {
    error("Unable Launch ClearCase Find CheckOuts");
    //message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="CompareWithPrevious" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember CompareWithPrevious
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:54 |
//@version Tim.Simpson | 28-09-04 16:14 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","cleardlg.exe","/diffpred "+ls_filename,"")>32) {


    return 1;

} else {

    error("Unable Launch ClearCase Find CheckOuts");
    //message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="getVersionProperties" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember getVersionProperties
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:54 |
//@version Tim.Simpson | 28-09-04 16:14 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","cleardescribe.exe",ls_filename,"")>32) {


    return 1;

} else {

    error("Unable Launch ClearCase Find CheckOuts");
    //message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="getElementProperties" return="int">
<param name="ts_filename" type="string" />
<![CDATA[//@cmember getElementProperties
//@param string | ts_filename |
//@return int |
//@version Richard.Talbot | 22-09-04 15:54 |
//@version Tim.Simpson | 28-09-04 16:14 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@i


//classes::des::CRFSystem::clearcase lo_clearcase ;

string ls_filename=sys::getcorrectcasepath(ts_filename);

if (init()==1) {

    if( setClearCaseEnv(ls_filename)!=1) {
        error("Unable to Set ClearCase UCM Environment");
        //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }
} else {
    error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
    //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
    return -1;
}

if (Sys::ShellExecute("","cleardescribe.exe",ls_filename,"")>32) {


    return 1;

} else {

    error("Unable Launch ClearCase Find CheckOuts");
    message("Unable Launch ClearCase Find CheckOuts","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );

    return -1;
}]]>
</method>
<method name="buildCCMenu" return="int">
<param name="to_parentform" type="object" />
<![CDATA[//@cmember buildCCMenu
//@param object | to_parentform |
//@return int |
//@version Richard.Talbot | 22-09-04 15:55 |
//@version Tim.Simpson | 28-09-04 16:54 |
//@version Jonathan.Muir | 18-11-04 14:58 |

    //Build MEnus On The Fly

String ini = Sys::MakeFullName(Path(),"../des.ini");


int CCEnabled = Sys::GetPrivateProfileString("ClearCase","Enabled",ini).val();


if  (to_parentform!=null && CCEnabled==1 ) {

    to_parentform.AddMenuPopUp("&ClearCase",6);
    to_parentform.AddMenuItem("ClearCase Explorer", "ccexplorer");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("Add to Source Control...", "ccaddtosrcctrl");
    to_parentform.AddMenuItem("Find Checkouts", "ccfindchecks");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("Properties of File", "ccfileprop");
    to_parentform.AddMenuItem("Update", "ccupdate");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("Check In...", "ccchkin");
    to_parentform.AddMenuItem("Check Out...", "ccchkout");
    to_parentform.AddMenuItem("Undo Checkout...", "ccundochkout");
    to_parentform.AddMenuItem("Undo Hijacked File", "ccundohijack");
    to_parentform.AddMenuItem("Hijack File","cchijack");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("History", "cchist");
    to_parentform.AddMenuItem("Version Tree", "ccvertree");
    to_parentform.AddMenuItem("Compare with Previous Version", "cccompprevver");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("Properties of Version", "ccpropver");
    to_parentform.AddMenuItem("Properties of Element", "ccpropelem");
    to_parentform.AddMenuSeparator();
    to_parentform.AddMenuItem("Help", "cchelp");


    to_parentform.enablemenuitem("ccexplorer",0);
    to_parentform.enablemenuitem("ccaddtosrcctrl",0);
    to_parentform.enablemenuitem("ccfindchecks",0);
    to_parentform.enablemenuitem("ccfileprop",0);
    to_parentform.enablemenuitem("ccupdate",0);
    to_parentform.enablemenuitem("ccchkin",0);
    to_parentform.enablemenuitem("ccchkout",0);
    to_parentform.enablemenuitem("ccundochkout",0);
    to_parentform.enablemenuitem("ccundohijack",0);
    to_parentform.enablemenuitem("cchijack",0);
    to_parentform.enablemenuitem("cchist",0);
    to_parentform.enablemenuitem("ccvertree",0);
    to_parentform.enablemenuitem("cccompprevver",0);
    to_parentform.enablemenuitem("ccpropver",0);
    to_parentform.enablemenuitem("ccpropelem",0);
    to_parentform.enablemenuitem("cchelp",0);


}

return 1;]]>
</method>
<method name="help" return="int">
<param name="ts_filename" type="string" />
<param name="to_parentform" type="object" />
<![CDATA[//@cmember help
//@param string | ts_filename |
//@param object | to_parentform |
//@return int |
//@version Richard.Talbot | 20-09-04 14:47 |
//@i



//Sys::ShellExecute("","C:\\Program Files\\Rational\\ClearCase\doc\index.htm","","");


return 1;]]>
</method>
<method name="setCCMenu" return="int">
<param name="ts_filename" type="string" />
<param name="to_parentform" type="object" />
<![CDATA[//@cmember setCCMenu
//@param string | ts_filename |
//@param object | to_parentform |
//@return int |
//@version Richard.Talbot | 22-09-04 15:41 |
//@version Tim.Simpson | 28-09-04 17:20 |
//@version Richard.Talbot | 29-09-04 11:40 |
//@version Tim.Simpson | 01-10-04 17:01 |
//@version Darren Ball | 08-02-06 10:41 |
//@i

String ini = Sys::MakeFullName(Path(),"../des.ini");


int CCEnabled = Sys::GetPrivateProfileString("ClearCase","Enabled",ini).val();


if  (to_parentform!=null && CCEnabled==1 ) {

    //classes::des::CRFSystem::clearcase lo_clearcase ;

    string ls_filename=sys::getcorrectcasepath(ts_filename);

    if (init()==1) {

        if( setClearCaseEnv(ls_filename)!=1) {
            error("Unable to Set ClearCase UCM Environment");
            //message("Unable to Set ClearCase UCM Environment","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
            return -1;
        }
    } else {
        error("Unable to Instantiate ClearCase Try Running ClearCase Doctor");
        //message("Unable to Instantiate ClearCase Try Running ClearCase Doctor","Source Control Error ",classes::core::windows::MB_OK|classes::core::windows::MB_ICONSTOP );
        return -1;
    }

    ccStatus = getFileStatus(ls_filename);
    UpdateStatusBar();

    if  (to_parentform!=null && ccStatus >=0) {
        if (setMenuItems(ccStatus,to_parentform)>0) {
            return 1;
        }
    }
}
return -1;]]>
</method>
<method name="setDefaultStatusBar">
<![CDATA[//@cmember setDefaultStatusBar
//@version Richard.Talbot | 29-09-04 11:46 |
//@version Darren Ball | 08-02-06 09:14 |
//@i

 CCMessage = "Ready.";
 CCError = "No errors reported.";

 UpdateStatusBar();

 return 1;]]>
</method>
<method name="UpdateStatusBar" return="void">
<![CDATA[//@cmember UpdateStatusBar
//@version Darren Ball | 08-02-06 09:48 |
//@return void |
Object x = sys::FindWindow(CallBackWindow);
if(x!=NULL) x.idStatusBar.DisplayInfo(ccStatus.DispText(),ccMessage,CCerror);]]>
</method>
<method name="SetParentWindow">
<param name="szWindowName" type="string" />
<![CDATA[//@cmember SetParentWindow
//@param string | szWindowName |
//@version Darren Ball | 08-02-06 09:47 |
//@i
CallBackWindow = szWindowName;]]>
</method>
</members>
<static>
<Integer name="CC_CHECKEDOUTRES" null="N" constval="1" />
<Integer name="CC_CHECKEDOUTUNRES" null="N" constval="2" />
<Integer name="CC_CHECKEDIN" null="N" constval="3" />
<Integer name="CC_VIEWPRIVATE" null="N" constval="5" />
<Integer name="CC_CHECKEDOUTEXT" null="N" constval="6" />
<Integer name="CC_HIJACKED" null="N" constval="4" />
<List name="statusLX" cls="classes::cpickn">
<item code="1" desc="Checked Out Reserved" PickType="" />
<item code="2" desc="Checked Out Unreserved" PickType="" />
<item code="3" desc="Checked In" PickType="" />
<item code="4" desc="Hijacked" PickType="" />
<item code="5" desc="View Private" PickType="" />
<item code="6" desc="Checked Out Ext" PickType="" />
<item code="0" desc="Unknown" PickType="" />
</List>
</static>
<return>
<rmeth name="getObject" cls="object" />
<rmeth name="error" cls="int" />
<rmeth name="setClearCaseEnv" cls="int" />
<rmeth name="getFileStatus" cls="int" />
<rmeth name="setMenuItems" cls="int" />
<rmeth name="hijack" cls="int" />
<rmeth name="checkOut" cls="int" />
<rmeth name="launchCCExplorer" cls="int" />
<rmeth name="addToSourceControl" cls="int" />
<rmeth name="findcheckouts" cls="int" />
<rmeth name="getFileProperties" cls="int" />
<rmeth name="update" cls="int" />
<rmeth name="checkIn" cls="int" />
<rmeth name="undoHiJack" cls="int" />
<rmeth name="undoCheckOut" cls="int" />
<rmeth name="gethistory" cls="int" />
<rmeth name="getVersionTree" cls="int" />
<rmeth name="CompareWithPrevious" cls="int" />
<rmeth name="getVersionProperties" cls="int" />
<rmeth name="getElementProperties" cls="int" />
<rmeth name="buildCCMenu" cls="int" />
<rmeth name="help" cls="int" />
<rmeth name="setCCMenu" cls="int" />
<rmeth name="UpdateStatusBar" cls="void" />
</return>
</class>
