<class name="globalXML" fauthor="$Author: Chris Moran $" fdate="$Date: 8 12 03 11:39 $" frevision="$Revision: 2 $">
<members>
<String name="name" />
<Object name="x" cls="xml" />
</members>
<static>
<Integer name="cache" comment="No of xml files to cache" constval="100" />
<List name="cached" cls="globalXML" />
<method name="LoadXML" return="XML">
<param name="filename" type="string" />
<param name="path" type="string" />
<param name="useCache" type="int" />
<![CDATA[//@cmember LoadXML
//@param string | filename | Filename of the XML to load
//@param string | path | Path to use as reference
//@param int | useCache |
//@return XML | The loaded XML within a confirmation tag
//@version Andrew Griffin | 01-11-01 13:40 | Initial version

//@i Loads XML from a text file.
//@i The returned XML will have a tag named 'XML' or 'Error'.
//@i if the load succeeded then the first element of this tag will
//@i  be the loaded XML, otherwise the first element will be an
//@i  error number, and the second element will be an error description

//@e xml X = &classes::core::XML::globalXML::LoadXML("XMLfile.xml", path());
//@e if (X.tag()=="error") {    // Check for errors
//@e      message("XML Load Error: " + X.getAttr("desc"));
//@e      return;
//@e } else X = &X[0];          // Get actual loaded XML

if (path!=null) {

    if (filename.indexOf("\\")>=0) {
        filename = sys::makerelativename( path, filename );
    }

    filename = Sys::MakeFullName( path, filename );
}

filename.tolower();

xml x; blob b;

if ((useCache==null || useCache==1) && cache && filename.lastindexOf(".xml")!=filename.length()-4) {
    globalXML gx = &cached.FindRow( filename );
    if (gx!=null) {
        int i = cached.FindIndex( gx );
        cached.MoveRow( i, cached.count() );
        return gx.x;
    }
}

if (filename.beginsWith("http:")) {
    HTTPConnection Con;
    b = Con.GetFile(filename);
    if (b==null) {
        x.setTag("error");
        x.addAttr("number", "1");
        x.addAttr("desc", "File could not be opened");
    }
} else {
    file f;
    if (f.open( filename, "r" )==0) {
        x.setTag("error");
        x.addAttr("number", "1");
        x.addAttr("desc", "File could not be opened");
    } else {
        b = f.ReadBlob();
        if (b==null) {
            x.setTag("error");
            x.addAttr("number", "2");
            x.addAttr("desc", "File could not be read");
        }
    }
}

if (!x.tag()) {
    x = &b.getXMLObject();

    if (x==null) {
        xml e; x = &e;
        e.setTag("error");
        e.addAttr("number", "3");
        e.addAttr("desc", "File could not be converted to XML");
    } else
    if (x.count()>0 && X[0].tag().eq("!DOCTYPE")) {
        xml e; x = &e;
        e.setTag("error");
        e.addAttr("number", "4");
        e.addAttr("desc", "Http file could not be opened/read");
    } else
        x.setTag("XML");
}

if (useCache==null || useCache>=0 && x.count()) cacheXML( X, filename );

return x;]]>
</method>
<method name="SaveXML" return="int">
<param name="X" type="xml" />
<param name="filename" type="string" />
<param name="path" type="string" />
<![CDATA[//@cmember SaveXML
//@param XML | X | The XML to save
//@param string | filename | Filename to save XML to
//@param string | path | Path to use as reference
//@return int | 1 on succeed, 0 on fail
//@version Andrew Griffin | 29-08-01 13:58 |
//@i Save an XML object to a text file.
//@i Note: You can't save to the web server (http connection) only locally.

if (path!=null) {

    if (filename.indexOf("\\")>=0) {
        filename = sys::makerelativename( path, filename );
    }

    filename = Sys::MakeFullName( path, filename );
}

filename.tolower();

if (cache) {
    globalXML gx = &cached.FindRow( filename );
    if (gx!=null) gx.RemoveFromList();
    globalXML nx = &cached.CreateRow();
    nx.name = filename;
    nx.x.setTag("XML");
    nx.x.addElement( x );
    if (cached.count()>cache) cached.DeleteRow(0);
}

blob b;

if (filename.beginsWith("http:")) {
    return 0;

} else {
    file f;
    if (f.create( filename )==0) return 0;
    int ok = F.writeXML( X );
    F.close();
    return ok;
}]]>
</method>
<method name="CacheXML">
<param name="X" type="xml" />
<param name="filename" type="string" />
<param name="path" type="string" />
<![CDATA[//@cmember CacheXML
//@param xml | X | The XML to save
//@param string | filename | Filename to save XML to
//@param string | path | Path to use as reference
//@version Andrew Griffin | 26-07-01 15:27 |
//@i Save an XML object to a text file.
//@i Note: You can't save to the web server (http connection) only locally.

if (path!=null) {

    if (filename.indexOf("\\")>=0) {
        filename = sys::makerelativename( path, filename );
    }

    filename = Sys::MakeFullName( path, filename );
}

filename.tolower();

if (cache) {
    globalXML gx = &cached.FindRow( filename );
    if (gx!=null) {
        gx.RemoveFromList();
    }
    globalXML nx = &cached.CreateRow();
    nx.name = filename;
    nx.x = x;
    if (cached.count()>cache) cached.DeleteRow(0);
}]]>
</method>
<method name="XMLtoString" return="string">
<param name="X" type="xml" />
<![CDATA[//@cmember XMLtoString
//@param XML | X | XML to convert to a string
//@return string | The serialised version of the XML.
//@version Andrew Griffin | v1.0 - 3/4/01
//@i Converts an XML tree to a serialised string


if (X==null) return "";

blob b;
b.writeXML( X );
return b.toString();]]>
</method>
<method name="StringToXML" return="string">
<param name="strXML" type="string" />
<param name="isList" type="int" />
<![CDATA[//@cmember StringToXML
//@param string | strXML | serialised XML in string format
//@param int | isList | (Optional) 1 = return XML within a base tag?
//@return XML | The XML version of the string.
//@version Andrew Griffin | v1.0 - 3/4/01
//@i Converts a serialised string to an XML tree
//@i The XML string must have just one base tag. Otherwise, to
//@i avoid loosing all other base tags set parameter 'isList' to 1.

//@e string sXML = "<head><body name=""one""/></head>";
//@e XML X = &classes::core::XML::globalXML::StringToXML( sXML );
//@e
//@e string sXML = "<a>123</a><b>456</b>"
//@e XML X = &classes::core::XML::globalXML::StringToXML( sXML, 1 );


blob b;
b.write( strXML );
XML X = &b.getXMLObject();
if ((isList==null || !isList) && X!=null)
    X = &X.element(0);
else
    X.setTag("XML");

return X;]]>
</method>
<method name="DebugXML" return="void">
<param name="X" type="xml" />
<![CDATA[//@cmember XMLtoString
//@param XML | X | XML to dump to the screen
//@return void
//@version Andrew Griffin | v1.0 - 3/4/01
//@i Displays an XML tree in a message window (for debug)

message( XMLtoString( X ) );]]>
</method>
<method name="BrowseXML" return="void">
<param name="X" type="xml" />
<![CDATA[//@cmember BrowseXML
//@param XML | X | XML to view/browse
//@version Andrew Griffin | v1.0 - 4/4/01
//@i Displays an XML tree as a hierarchy (for debug)

WXMLViewer::BrowseXML( X );]]>
</method>
<method name="getContent" return="string">
<param name="X" type="xml" />
<![CDATA[//@cmember getContent
//@param XML | X | XML to get contents of
//@return string | The contents of the XML.
//@version Andrew Griffin | v1.0 - 4/4/01
//@i Retrieves any string contents of an XML object

//@e xml X = &classes::core::XML::globalXML::LoadXML("boresult.xml");
//@e if (X.tag()=="error") return 0;
//@e X = &X[0];     // Get actual loaded XML
//@e
//@e xml X2 = &classes::core::XML::globalXML::findTag( "address_date", X );
//@e if (X2==null) return 0;
//@e
//@e message( classes::core::XML::globalXML::getContent( X2 ) );


if (X==null) return "";

XML X2 = &X.findElement( "" );
if (X2==null) return "";

return X2.content();]]>
</method>
<method name="findTag" return="XML">
<param name="tag" type="string" />
<param name="X" type="XML" />
<![CDATA[//@cmember findTag
//@param string | tag | Tag to Search for
//@param XML | X | The XML to search through
//@return XML | The XML element found or null
//@version Andrew Griffin | v1.0 - 3/4/01
//@i Searches through an XML tree for a specific tag
//@i The tag name is case-insensitive

//@e xml X = &classes::core::XML::globalXML::LoadXML("boresult.xml");
//@e if (X.tag()=="error") return 0;
//@e X = &X[0];     // Get actual loaded XML
//@e
//@e xml X2 = &classes::core::XML::globalXML::findTag( "address_date", X );
//@e if (X2==null) return 0;
//@e
//@e message( classes::core::XML::globalXML::getContent( X2 ) );


if (X.tag().eq(tag)) return X;

XML o = null;
for (int i=0; i<X.count(); i++) {
  o = &findTag( tag, X.element(i) );
  if (o!=null) return o;
}

return null;    // not found]]>
</method>
<method name="findAttrib" return="XML">
<param name="name" type="string" />
<param name="val" type="string" />
<param name="X" type="XML" />
<![CDATA[//@cmember findAttrib
//@param string | name | attribute name to search upon
//@param string | val | attribute value to search for
//@param XML | X | The XML to search through
//@return XML | The XML element found or null
//@version Andrew Griffin | v1.0 - 3/4/01
//@i Searches through an XML tree for a specific attribute pair.
//@i Both the name & attribute values are case-insensitive

//@e X2 = &classes::core::XML::globalXML::findAttrib( "name", "main", X );
//@e classes::core::XML::globalXML::debugXML( X2 );


if (X.GetAttr( name ).eq(val)) return X;

XML o = null;
for (int i=0; i<X.count(); i++) {
  o = &findAttrib( name, val, X.element(i) );
  if (o!=null) return o;
}

return null;    // not found]]>
</method>
</static>
<return>
<rmeth name="LoadXML" cls="XML" />
<rmeth name="SaveXML" cls="int" />
<rmeth name="XMLtoString" cls="string" />
<rmeth name="StringToXML" cls="string" />
<rmeth name="DebugXML" cls="void" />
<rmeth name="BrowseXML" cls="void" />
<rmeth name="getContent" cls="string" />
<rmeth name="findTag" cls="XML" />
<rmeth name="findAttrib" cls="XML" />
</return>
</class>
