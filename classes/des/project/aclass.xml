<class name="aClass" HierImageField="Icon" fauthor="$Author: Chris Moran$" fdate="$Date: 8 12 03 11:40$" frevision="$Revision: 2$">
<members>
<String name="Name" />
<String name="Path" />
<Integer name="isForm" />
<String name="Icon" />
<String name="parControl" />
<String name="Desc" />
<String name="Notes" />
<List name="classes" cls="aClass" />
<method name="getXML" return="XML">
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

XML x;

x.setTag( "Proj" );

x.addAttr( "Path", Path.subString( ::AdvSearch::preRootPath.length() ) );
x.addAttr( "Name", Name );
x.addAttr( "parCtrl", parControl );
x.addAttr( "isForm", isForm.toString() );
x.addAttr( "notes", notes );

for (int i=0; i<classes.count(); i++)
  x.addElement( classes[i].getXML() );

return &x;]]>
</method>
<method name="EventHierMouseSelect">
<param name="Hier" type="hierarchy" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

Hier.getParent().idDesc.bindTo( &Desc );
Hier.getParent().idNotes.bindTo( &Notes );
Hier.getParent().idLocation.setText( Path );
Hier.getParent().idParCtrl.bindTo( &parControl );]]>
</method>
<method name="EventHierDoubleClick">
<param name="Hier" type="hierarchy" />
<![CDATA[//@cmember
//@param
//@return
//@version Jonathan.Muir | 26-02-10 13:44 |
//@i

if (isForm==-1) return;

object win = ::AdvSearch::OpenClassFilePath( path, "" );
if(win!=null) win.show(1);]]>
</method>
<method name="EventHierRightClick">
<param name="Hier" type="hierarchy" />
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 24-05-02 16:09 |
//@i

classes::core::wpopupmenu P;

if (isForm>=0) {
    P.add( "Open Class", "OPC" );
    P.add( "Browse Class", "BRC" );
    P.addSeparator();
}

string cap = isForm==-1 ? "Add a root class" : "Add a child class";
P.add( cap , "ACC" );
P.AddSeparator();

if (isForm>=0) {
    P.add( "Cut class (and dependants)", "CUT" );
    P.add( "Copy class (and dependants)", "CPY" );
}
if (Hier.getParent().copyHier.Tag())
    P.add( "Paste a child from clipboard", "PST" );
P.AddSeparator();
if (isForm>=0) P.add( "Delete class (and dependants)", "DEL" );

string s = P.Track(1);

if (s == "OPC") {
    EventHierDoubleClick( Hier );
    return;
}
if (s == "BRC") {
    ::browse::clsBrowser myBrowser = &::browse::clsBrowser::openAtCursor();
    int i = Path.lastIndexOf("\\");
    myBrowser.OpenVar("object", "this", Name, Path.left(i+1));
    return;
}
if (s == "ACC") {
    int i = path.lastIndexOf("\\");
    string filename = path.left(i+1);
    if (filename.indexOf("classes\\projects")>=0) filename = ::AdvSearch::rootPath;
    filename = Hier.getParent().GetOpenFileName( cap + " to " + Name, "W2 Class Files|*.xml", filename );
    if (filename=="") return;
    addClass( this.classes, filename, 0, "", "" );
    setOpen( 1 );
    return;
}
if (s == "CPY" || s == "CUT") {
    Hier.getParent().copyHier = getXML();
}
if (s == "PST") {
    setTo( classes, Hier.getParent().copyHier );
    setOpen(1);
}
if (s == "DEL" || s == "CUT") {
    Hier.getParent().idDesc.bindTo( null );
    Hier.getParent().idNotes.bindTo( null );
    removeFromList();
    ::Browse::ClsBrowser::openProject.setMod( 1 );
}]]>
</method>
<method name="EventHierDrop">
<param name="Hier" type="hierarchy" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

Object HFrom = Hier.DropSource();
if (HFrom==null) { Message("HFrom error!!!"); return; }

Object R = HFrom.CurrentRow(); // current row in source hierarchy

if (R.ClassName()==ClassName())
  { // same class
  if (HFrom==Hier){
    List L = &R.OwnerList();
    if (L == OwnerList()) {
        int from = L.FindIndex( R );
        int to   = L.FindIndex( this );
        L.MoveRow(from,to);
    } else {
        L.MoveSelectionsTo( classes );
        SetOpen(1);
    }
    // L.SetCurrent(to);
    Hier.SelectRow( R );
    ::Browse::ClsBrowser::openProject.setMod( 1 );
    }
  }]]>
</method>
<method name="findClassPar">
<param name="clsList" type="list" />
<param name="name" type="String" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

for (int i=0; i<classes.count(); i++) {
  aClass c = &classes[i];
  if (isForm>=0)
    if (c.path.eq(Name)) clsList.addRow( this );
  c.findClassPar( clsList, name );
}]]>
</method>
<method name="findClass" return="aClass">
<param name="name" type="String" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

for (int i=0; i<classes.count(); i++) {
  aClass c = &classes[i];
  if (c.path.eq(Name)) return &c;

  if (c.classes.count() > 0) {
    object o = &c.findClass( name );
    if (o!=null) return o;
  }
}

return null;]]>
</method>
</members>
<static>
<method name="addClass" return="aClass">
<param name="me" type="list" />
<param name="path" type="string" />
<param name="isForm" type="int" />
<param name="notes" type="string" />
<param name="parCtrl" type="string" />
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 26-07-01 12:38 |
//@i

aClass newCls;

int i = path.lastIndexOf("\\"),
    i2 = path.lastIndexOf(".");

if (i2==-1) i2=path.length();

newCls.name = path.subString(i+1, i2);
newCls.path = path;
newCls.notes = notes;
newCls.parControl = parCtrl;

if (newCls.name=="" || isForm==-1) {
    newCls.isForm = -1;

    newCls = &me[me.addRow( newCls )];
    newCls.setQueried( 1 );
    return newCls;
}

XML myXML = &::globalxml::LoadXML( path );
if (myXML.tag()=="error") {
    message("Can't open file " + path, "Project file error...");
    return null;
}
/*
File afile;
if (!afile.Open(path, "r")) {
    message("Can't open file " + path, "Project file missing...");
    return null;
}
Blob B = afile.readBlob();
afile.close();
if (B==null)  {
    message("Can't read from file " + path, "Error checking project files...");
    return null;
}
XML myXML = B.GetXMLObject();
if (myXML==null)  {
    message("Can't parse the file " + path, "Error checking project files...");
    return null;
}*/

// Parse the file

myXML = myXML.getElement(0);
if (myXML==null) {
    message("This is not a valid XML file.", "Error checking project files...");
    return null;
}

newCls.isForm = (myXML.tag().eq("form"));

if (newCls.isForm) newCls.Icon = "::hdoc.bmp"; else newCls.Icon = "::hattr.bmp";

newCls.desc = myXML.getAttr( "description" );

newCls = &me[me.addRow( newCls )];
newCls.setQueried( 1 );
::Browse::ClsBrowser::openProject.setMod( 1 );

return newCls;]]>
</method>
<method name="setTo">
<param name="aClassL" type="list" />
<param name="X" type="XML" />
<![CDATA[//@cmember
//@param
//@return
//@version
//@i

aClass newCls = &addClass( aClassL, ::AdvSearch::preRootPath + X.getAttr( "Path" ), X.getAttr( "isForm" ).val(), X.getAttr( "notes"), X.getAttr( "parCtrl") );
if (newCls!=null) {
    for (int i=0; i<X.count(); i++)
        setTo( newCls.classes, X.getElement(i) );

    if (X.count()>0) newCls.setOpen( 1 );
}]]>
</method>
</static>
<disp>
<e f="Name" />
</disp>
<return>
<rmeth name="getXML" cls="XML" />
<rmeth name="findClass" cls="aClass" />
<rmeth name="addClass" cls="aClass" />
</return>
</class>
