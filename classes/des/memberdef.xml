<class name="MemberDef" description="Class Member" HierImageField="Icon" fauthor="$Author: Chris Moran$" fdate="$Date: 8 12 03 11:40$" frevision="$Revision: 2$">
<members>
<String name="MemberName" desc="Name" xa="name" />
<String name="MemberType" desc="Type" xa="Tag" />
<String name="MemberClass" desc="Class" sql="jnnn" case="U" xa="cls" />
<String name="IsList" desc="List" />
<String name="MemberSize" desc="Size" xa="size" />
<String name="MemberADP" desc="Scale" xa="adp" />
<String name="MemberDesc" desc="Description" xa="desc" />
<String name="MemberSQL" desc="SQL" xa="sql" />
<String name="MemberPick" desc="Pick" xa="pick" />
<String name="Hier" xa="hier" />
<String name="Key" />
<String name="Seq" />
<String name="CCase" pick="CaseFg" />
<String name="Multiline" />
<String name="DateString" />
<String name="DateTime" />
<String name="Icon" />
<List name="Attributes" cls="XMLAttr" hier="N" />
<List name="XMLContent" cls="XMLObj" />
<String name="Nullable" />
<String name="Comment" />
<String name="Validation" />
<Integer name="IsConst" />
<String name="ConstVal" />
<String name="ListSRC" />
<String name="CustomAttr" />
<String name="LinkDBTable" />
<Integer name="OriginalFileIndex" />
<method name="GetXML">
<param name="X" type="object" />
<![CDATA[//@version Andrew Griffin | 18-09-01 12:53 |


X.SetTag(MemberType); // <Integer ... <String ... <List ...
X.AddAttr("name",MemberName);

if (MemberClass)  X.AddAttr("cls",MemberClass);
// if (IsList=="[]") X.AddAttr("list","Y");
if (MemberDesc)   X.AddAttr("desc",MemberDesc);
if (MemberSQL)    X.AddAttr("sql",MemberSQL);
if (MemberPick)   X.AddAttr("pick",MemberPick);
if (MemberSize)   X.AddAttr("size",MemberSize);
if (MemberADP)    X.AddAttr("adp",MemberADP);

if (Nullable=="N") X.AddAttr("null","N");

if (Key)          X.AddAttr("key",Key);
if (Seq)          X.AddAttr("seq",Seq);
if (Hier=="N")    X.AddAttr("hier","N");
if (CCase)        X.AddAttr("case",CCase);
if (Multiline)    X.AddAttr("multiline",Multiline);
if (DateString)   X.AddAttr("dbstr",DateString);
if (DateTime)     X.AddAttr("time",DateTime);
if (Comment)      X.AddAttr("comment",Comment);
if (Validation)   X.AddAttr("validation",Validation);
if (IsConst)      X.AddAttr("constval",ConstVal);
if (ListSRC)      X.AddAttr("lsrc",ListSRC);
if (CustomAttr)   X.AddAttr("cattr", CustomAttr);
if (LinkDBTable)  X.AddAttr("ldbtab", LinkDBTable);


int n;
for(n=0;n<Attributes.Count();n++){
    Object A = &Attributes[n];
    if (A.Attr) X.AddAttr(A.Attr,A.Value);
}
for(n=0;n<XMLContent.Count();n++){
    XML ZX;
    X.AddElement(ZX);
    XMLContent[n].GetXML(ZX);
}]]>
</method>
<method name="SetTo">
<param name="X" type="object" />
<param name="index" type="int" />
<![CDATA[//@cmember SetTo
//@param object | X |
//@param int | index |
//@version andrew.banyard | 21-04-15 16:54 |

OriginalFileIndex = index;
SetQueried(1);

Nullable = "Y";
Hier = "Y";

MemberType = X.Tag();
for (int n=0;n<X.AttrCount();n++) {
  String s = X.AttrName(n);
  String q = s.lower();
  String v = X.AttrVal(n);
  if      (q=="name") MemberName = v;
  else if (q=="list") IsList     = "[]";
  else if (q=="cls")  MemberClass = v;
  else if (q=="desc") MemberDesc = v;
  else if (q=="sql")  MemberSQL = v;
  else if (q=="pick") MemberPick = v;
  else if (q=="size") MemberSize = v;
  else if (q=="adp")  MemberADP = v;
  else if (q=="key")       Key = v;
  else if (q=="seq")       Seq = v;
  else if (q=="hier")      Hier = v;
  else if (q=="case")      CCase = v;
  else if (q=="multiline") Multiline = v;
  else if (q=="dbstr")     DateString = v;
  else if (q=="time")      DateTime = v;
  else if (q=="null")      Nullable = v;
  else if (q=="comment")   Comment = v;
  else if (q=="validation") Validation = v;
  else if (q=="lsrc")       ListSRC = v;
  else if (q=="constval"){
    IsConst = 1;
    ConstVal = v;
  }
  else if (q=="cattr")     CustomAttr = v;
  else if (q=="ldbtab")    LinkDBTable = v;
  else AddAttr(s,v);
}

for (int e=0;;e++) {
    Object EX = &X.Element(e);
    if (EX==null) break;
    XMLContent.CreateRow().SetTo(EX);
}

SetIcon();]]>
</method>
<method name="SetIcon">
<![CDATA[
String t = MemberType;
t.toLower();
if      (t=="integer") Icon = "h123.bmp";
else if (t=="string")  Icon = "habc.bmp";
else if (t=="float")   Icon = "hfloat.bmp";
else if (t=="date")    Icon = "hfloat.bmp";
else if (t=="double")  Icon = "hfloat.bmp";
else if (t=="list")    Icon = "hlist.bmp";
else                   Icon = "hobject.bmp";]]>
</method>
<method name="AddAttr">
<param name="nm" type="object" />
<param name="valu" type="object" />
<![CDATA[

Object A = &Attributes.CreateRow();
A.Attr = nm;
A.Value = valu.toString();]]>
</method>
<method name="Init">
<![CDATA[//@version Andrew Griffin | 07-05-02 16:08 |

MemberName="NewMember";
Nullable = "Y";
Hier = "Y";

SetQueried(1);]]>
</method>
<method name="EventHierDrop">
<param name="Hier" type="object" />
<![CDATA[//@version Andrew Griffin | 24-05-02 16:02 |

Object HFrom = Hier.DropSource();
if (HFrom==null) { Message("HFrom error!!!"); return; }

Object R = HFrom.CurrentRow(); // current row in source hierarchy

if (R.ClassName()==ClassName())
  { // same class
  if (HFrom==Hier){
    Object L = OwnerList();
    int from = L.FindIndex( R );
    int to   = L.FindIndex( this );
    L.MoveRow(from,to);
    // L.SetCurrent(to);
    Hier.SelectRow( R );
    }
  else{
    // Message("Drop Across!!");
    classes::core::wpopupmenu P;
    P.Add("Copy Member: '" + R.MemberName + "' ?");
    String s = P.Track();
    if (s=="") return;
    Object L = OwnerList();
    int to   = L.FindIndex( this );
    int idx = L.AddRow( R );
    L[idx].SetQueried(1);
    L.SetCurrent(idx);
    L[idx].EventHierMouseSelect( Hier ); // as if we clicked on it
    L.MoveRow(idx,to);
    }
  }]]>
</method>
<method name="EventHierRightClick">
<param name="Hier" type="object" />
<![CDATA[//@version Andrew Griffin | 01-07-02 15:48 |
//@version Jonathan.Muir | 26-02-10 13:36 |
string mClass = memberClass;

classes::core::wpopupmenu P;

P.Add("Cut Selected Member(s)","CUTM",classes::core::icons::clipboard_cut);
P.Add("Copy Selected Member(s)","CPYM",classes::core::icons::clipboard_copy);

string ctyp = clipboard::getTyp();
if (ctyp.beginswith("MClip")) {
    ctyp = ctyp.subString( 5 );
    if (ctyp=="V") ctyp = "Member Variable(s)"; else
    if (ctyp=="F") ctyp = "Member Functions(s)"; else
    if (ctyp=="VF") ctyp = "Member Var(s) && Func(s)";
    P.Add("Paste " + ctyp,"PSTM",classes::core::icons::clipboard_paste);
} else P.Add(".Paste Member(s)", "", classes::core::icons::clipboard_paste);

P.AddSeparator();

P.Add("Duplicate Member","DPM");

P.AddSeparator();

P.Add("Delete Selected Member(s)","DM",classes::core::icons::clipboard_delete);

P.AddSeparator();

classes::core::wpopupmenu p2;
{
    P2.Add("Find in this class", "SEARCH", "classes::des::designer.ico" );
    P2.AddSeparator();
    P2.Add("Find in this folder", "SEARCHFILES", classes::core::icons::filing_directory );
    P2.Add("Find in all files", "SEARCHALLFILES", classes::core::icons::filing_computer );
}
P.Add( p2, "Search for member", "classes::resource::standard::callfinder.ico" );

//P.Add("Find References","FREF",classes::core::icons::search_search);
//P.Add("Find Refs in Files","FREF2",classes::core::icons::filing_index);

P.AddSeparator();

if (MemberType.eq("list") && MemberCLass!="" &&
     ownerlist().ownerRow().SectionType=="static") {
        P.Add("Add Item","AI");
        P.Add("Remove All Items","RA");
        P.AddSeparator();
}

// If this member has a class assosiated with it
if (mClass!="") {
    P.Add("Open Class","OC");
    P.Add("Browse","BC");
    P.AddSeparator();
}

string jmp;
if (ownerlist().ownerRow().SectionType=="members") {
    P.Add("Move Member to Static","MS",classes::core::icons::process_handRight); jmp="static";
} else {
    P.Add("Move Member to Non-Static","MS",classes::core::icons::process_handRight); jmp="members";
}

String s = P.Track(1);

if (s=="CUTM")      // Cut to clipboard
{
    OwnerList().OwnerRow().copySelected();
    s = "DM";       // now delete...
}

if (s=="CPYM") {    // Copy to clipboard
    OwnerList().OwnerRow().copySelected();
}

if (s=="PSTM") {    // Paste from clipboard
    OwnerList().OwnerRow().pasteMembers( Hier, ownerList().FindIndex( this )+1, NULL );
}

if (s=="OC") {      // Open Member's Class
    object clas = &Hier.GetParent().XFile.Classes[0];
    string tPath = clas.classPath.left(clas.classPath.length() - clas.ClassName.length() - 4);
    object win = AdvSearch::OpenClassFile( mClass, tPath, "" );
    if(win!=null) win.show(1);
}

if (s=="SEARCH") {  // Find in this class
    Object Z = &Hier.GetParent().idMulti.FindPane("MethodEdit");
    if (Z==null)
    {
        Z = &Hier.GetParent().XFile.Classes[0];
        if (Z.Sections[0].Functions.count()) Z = &Z.Sections[0].Functions[0];
        else
        if (Z.Sections[1].Functions.count()) Z = &Z.Sections[1].Functions[0];
        else
            return;
        Z = &Hier.GetParent().editMethod( Z );
    }
    Z.idSearch.setText( memberName );
    Z.doBIGSearch( null );
}

if (s=="SEARCHFILES") {  // Find References in Files
    search::wSearchinFiles::init( Hier.GetParent().filename, 1, memberName );
}

if (s=="SEARCHALLFILES") {  // Find References in Files
    search::wSearchinFiles::init( "", 1, memberName );
}

if (s=="BC") {      // Open Class Browser
    object clas = &Hier.GetParent().XFile.Classes[0];
    string tPath = clas.classPath.left(clas.classPath.length() - clas.ClassName.length() - 4);
    object myBrowser = browse::clsBrowser::openAtCursor();
    myBrowser.OpenVar(MemberType, memberName, mClass, tPath);
}

if (s=="MS") {  // Move to Static / Non-Static
    Object Z = &Hier.GetParent().idMulti.FindPane("MemberEdit");
    if (Z!=null) Z.unBindAll();

    list o = &ownerlist().ownerRow().ownerList();
    o = &o.findRow(jmp).MemberDefs.createRow();
    XML x; getXML( x ); o.setTo( x );

    removeFromList();

    o.setQueried(1);
    Hier.getParent().idResults.SelectRow(o);
    o.EventHierMouseSelect(Hier);  // select itself
    Hier.GetParent().SetMod(null,1);
}

if (s=="DPM") { // Duplicate Member
    Object Z = Hier.GetParent().idMulti.FindPane("MemberEdit");
    if (Z!=null) Z.unBindAll();

    int i=ownerList().findIndex(this);
    object o = ownerlist().createRow(i+1);
    XML x; getXML( x ); o.setTo( x );
    o.setqueried(1);
    Hier.getParent().idResults.SelectRow(o);
    o.EventHierMouseSelect(Hier);  // select itself
    Hier.GetParent().SetMod();
}

if (s=="DM") { // Delete Member
    classsection o = &ownerlist();
    int idx = o.findIndex( this );
    memberdef nm = null;

    for (int ci=o.count()-1; ci>=0; ci--)
      if (o[ci].isselected())
        o[ci].RemoveFromList(); // remove selected...

    if (idx<o.count()) nm = &o[idx]; else
        if (idx>0 && idx<o.count()) nm = &o[idx-1]; else
            nm = &o.ownerRow();

    Hier.getParent().idResults.SelectRow(nm);
    nm.EventHierMouseSelect(Hier.getParent().idResults);  // select itself
    Hier.GetParent().SetMod(null,1);
}

if (s=="AI") { // Add Item (to a list type)
    createNewItem(Hier);
    Hier.GetParent().SetMod();
}

if (s=="RA") { // Remove All Items (from a list type)
    XMLContent.reset();
    Hier.GetParent().SetMod();
}]]>
</method>
<method name="EventHierMouseSelect">
<param name="Hier" type="object" />
<![CDATA[

Hier.GetParent().EditMember(this);]]>
</method>
<method name="GetMemberPop">
<param name="P" type="object" />
<param name="path" type="object" />
<param name="pre" type="object" />
<![CDATA[//@version Andrew Griffin | 24-05-02 16:02 |

String s = MemberType; s.toLower();
if (s=="integer" || s=="double" || s=="string" || s=="date"){
     P.Add(MemberName,pre+MemberName);
     return;
     }
// P.Add(MemberName,path + "\n" + MemberType + "\n" + MemberName);
classes::core::wpopupmenu Z;
String sfx = ".";
if (IsList=="[]") sfx = "[].";
if (s=="list") sfx = "[].";
Dict::GetMemberPop(Z,path,MemberClass,pre+MemberName+sfx);
P.Add(Z,MemberName + IsList);]]>
</method>
<method name="FillMenu">
<param name="P" type="object" />
<param name="ClassPath" type="object" />
<![CDATA[
String s = MemberType; s.toLower();
if (s=="integer" || s=="double" || s=="string" || s=="date"){
   String q = MemberName;
   if (P.Prefix()) q = P.Prefix() + "." + MemberName;
   P.Add(MemberName + "\t" + MemberType,q);
   return;
   }
if (s=="object" || s=="list"){
    Dict::AddObjectToDynaMenu(P,MemberName,MemberClass,ClassPath);
    return;
    }
P.Add(MemberType + " " + MemberName + " ? type");]]>
</method>
<method name="createNewItem">
<param name="Hier" type="object" />
<![CDATA[//@version Andrew Griffin | 06-08-01 14:53 |
// Create a new Item Record

XMLObj o = &XMLContent.createRow();

o.Tag = "item";

object clas = Hier.GetParent().XFile.Classes[0];
string tPath = clas.classPath.left(clas.classPath.length() - clas.ClassName.length() - 4);

tPath = advsearch::classToPath( MemberClass, tPath, 0 );

XML X = &globalxml::LoadXML( tPath );
if (X.tag()=="error") return myError("Unable to Open Item's Class Definition");

/*file f;
if (!f.Open(tPath, "r")) return myError("Unable to Open Item's Class Definition");
Blob b = f.readBlob();
f.close();
if (b==null) return myError("Error: Class in unreadble format");
XML x = b.getXMLObject(), x2;
if (x==null) return myError("Error: Unable to convert class to internal XML structure");*/
x = &x.getElement(0);

xml x2;

// Find <Members> Tag
if (!x.tag().eq("class")) return myError("Error in class definition");

for (int i=0;; i++) {
    x2 = &x.getElement(i);
    if (x2==null) return myError("Error in class definition: Class has no members tag");
    if (x2.tag().eq("members")) break;
}

// Loop through members, creating attributes
for (i=0;; i++) {
    x = &x2.getElement(i);
    if (x==null) break;

    string tag = x.Tag();
    if (tag.eq("string") || tag.eq("integer") || tag.eq("float") || tag.eq("double") || tag.eq("date"))
        o.Attrs.createRow().Attr = x.getAttr("name");
}

o.setqueried(1);
Hier.SelectRow(o);
o.EventHierMouseSelect(Hier);  // select itself]]>
</method>
<method name="myError">
<param name="Err" type="string" />
<![CDATA[message(Err);
return 0;]]>
</method>
</members>
<static>
<List name="CaseFg" cls="CPickS">
<item code="" desc="Mixed" />
<item code="U" desc="Upper" />
<item code="L" desc="Lower" />
<item code="C" desc="Capitalize" />
</List>
</static>
<disp>
<e f="MemberType" sfx=" " />
<e f="MemberClass" sfx=" " />
<e f="MemberName" />
<e f="IsList" />
</disp>
</class>
