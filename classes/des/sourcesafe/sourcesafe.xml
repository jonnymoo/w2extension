<form name="sourcesafe" caption="Source Safe" savepos="SourceSafePos" esccancel="1" fauthor="$Author: Chris Moran $" fdate="$Date: 8 12 03 11:41 $" frevision="$Revision: 2 $">
<members>
<Object name="comOb" />
<String name="filename" />
<String name="SSuserName" />
<Integer name="func" />
<List name="objs" cls="fItems" />
<List name="folders" cls="fItems" />
<Integer name="enforceDocId" />
<Integer name="okState" />
<Integer name="skipDialog" />
<Object name="session" cls="classes::Des::Sessions::aSession" />
<method name="begin">
<![CDATA[//@version Andrew Griffin | 25-02-02 09:26 |
// func == 0 : CheckOut
//         1 : CheckIn

classes::com::ComObject objVSSDatabase, objVSSRoot = null, objFound = null;

if (objVSSDatabase.connect( "SourceSafe" ) < 0) {
    message("Failed COM Connection to Source Safe");
    func=-1; setTimer(100);
    return;
}

String ini = Sys::MakeFullName(Path(),"..\\des.ini");
string SrcSafeIni = Sys::GetPrivateProfileString("SourceSafe","inipath",ini);
SSuserName = Sys::GetPrivateProfileString("SourceSafe","username",ini);
string SSpassword = Sys::GetPrivateProfileString("SourceSafe","password",ini);
enforceDocId = classes::des::sessions::aSession::useSessions;
okState = 1;

if (!SSuserName) {
    objVSSDatabase.Open(SrcSafeIni);
    SSuserName = sys::GetNetworkUser();
} else objVSSDatabase.Open(SrcSafeIni, SSuserName, SSpassword);


objVSSRoot = objVSSDatabase.VSSItem("$/", 0);

setwaitcursor();

locateFile(objVSSRoot, "$/", "");

if (func!=1 && func!=2 && objs.count()==0) {
    message("Can't Find the class: " + filename + " in Source Safe.");
    func=-1; setTimer(100);
    return;
}

int i;

switch (func) {

  case 0:   // Check Out
    for (i=0; i<objs.count(); i++)
      if (objs[i].comobj.IsCheckedOut() &&
          objs[i].comobj.Checkouts().item( objs[i].comobj.checkouts().count() ).username().eq(SSuserName)) {
        i = 9999;
        break;
      }

    if (i==9999) {
        message("You have already checked this class out of SourceSafe", "Check Out Cancelled");
        func=-1; setTimer(100);
        return;
    }
    break;

  case 1,2,4:   // 1 = Check In; 2 = Check In but Keep Checked Out
    int lstc = objs.count();
    for (i=0; i<objs.count(); i++)
      if (!objs[i].comobj.IsCheckedOut() ||
          !objs[i].comobj.Checkouts().item( objs[i].comobj.checkouts().count() ).username().eq(SSuserName)) {
        objs.deleteRow(i);
        i--;
      }

    if (objs.count()==0 && lstc>0) {
        message("This class has not been checked out of SourceSafe by You", "Check In Failed!");
        func=-1; setTimer(100);
        return;
    }

    if (objs.count()==0) {
        doAddClass();
        return;
    }
    break;

  case 3:   // Get Latest Version
    break;

}

if (objs.count()==1) {
    doOperation( objs[0].comobj );
    return;
}

idWait.setVisible( 0 );
idList.setVisible( 1 );
idCancel.setVisible( 1 );
SizeFormToContent();

// Wait for user input...]]>
</method>
<method name="doObjClicked">
<![CDATA[doOperation( objs.currentRow().comobj );]]>
</method>
<method name="doOperation">
<param name="objFound" type="classes::com::comObject" />
<![CDATA[//@version Andrew Griffin | 29-07-02 09:41 |
// func == 0 : CheckOut
//         1 : CheckIn

if (enforceDocId)
    populateSessionList( session.sesId );

idWait.setVisible( 1 );
idList.setVisible( 0 );
SizeFormToContent();

// func: 0=CheckOut; 1=CheckIn; 2=CheckIn/KeepOut; 3=GetLatest

int ssMode, refresh=1;
string who;

if (func==3) {  // GetLatest
    if (!objFound.isDifferent()) {
        message("There are no changes to the local class\r\nCancelling Get Latest", "SourceSafe", classes::core::windows::MB_ICONEXCLAMATION);
        func=-1; setTimer(100);
        return 0;
    }

    if (objFound.IsCheckedOut()) {
        who = objFound.Checkouts().item( objFound.checkouts().count() ).username();
        if (SSuserName.eq(who)) {
            ssMode = 0;
            if (message("You will LOOSE ANY CHANGES you have made to this class!\r\n" +
                        "Are you sure you want to continue with the Get Latest?",
                        "SourceSafe Warning",
                        classes::core::windows::MB_ICONEXCLAMATION | classes::core::windows::MB_YESNO)
                == classes::core::windows::IDNO) {
                func=-1; setTimer(100);
                return 0;
            }
        }
    }

    // Is our file read/writable?
    filefinder ff = &sys::NewFileFinder();
    int found = ff.FindFirst( filename, "" );
    if (found && !ff.IsReadOnly)
    {
        if (message("Source file is read/writable, you will LOOSE ANY CHANGES you have made to this class!\r\n" +
                    "Are you sure you want to continue with the Get Latest?",
                    "SourceSafe Warning",
                    classes::core::windows::MB_ICONEXCLAMATION | classes::core::windows::MB_YESNO)
            == classes::core::windows::IDNO) {
            func=-1; setTimer(100);
            return 0;
        }
    }

    //
    // GET LATEST
    objFound.get( "", 8 + 128);   // TimeMod + RepREPLACE

    message("Local Class Successfully Updated", "SourceSafe", classes::core::windows::MB_ICONINFORMATION);
} else

if (objFound.IsCheckedOut()) {  // *** Already Checked Out ***

    who = objFound.Checkouts().item( objFound.checkouts().count() ).username();

    if (func==0) {  // Check Out
        message("The Class is already Checked Out to " + who, "Check Out Failed!", classes::core::windows::MB_ICONEXCLAMATION);
        func=-1; setTimer(100);
        return 0;
    }

    // Check it's booked out to me!!!
    if (!SSuserName.eq(who)) {
        message("You do not have permission to Check this class into SourceSafe.\r\n" +
                "The Class is checked out by " + who, "Check In Failed!", classes::core::windows::MB_ICONEXCLAMATION);
        func=-1; setTimer(100);
        return;
    }

    if (!objFound.isDifferent()) {
        if (func==1 || func==4) {
            ssMode = 3;
            message("There are no changes to the local class\r\nUndoing Check Out", "SourceSafe", classes::core::windows::MB_ICONEXCLAMATION);
            objFound.undoCheckOut();
        } else {    // func==2
            message("There are no changes to the local class\r\nKeeping Checked Out", "SourceSafe", classes::core::windows::MB_ICONEXCLAMATION);
            func=-1; setTimer(100);
            return 0;
        }
    } else {
        if (func==4) {
            ssMode = 3;
            if (message("You have made changes to your local class that WILL BE LOST!\r\nContinue with Undo?", "Undo Check Out Warning!", classes::core::windows::MB_YESNO | classes::core::windows::MB_ICONEXCLAMATION) == classes::core::windows::IDNO) {
                func=-1; setTimer(100);
                return 0;
            }
            message("Check Out Undone", "SourceSafe", classes::core::windows::MB_ICONINFORMATION);
            objFound.undoCheckOut();
        } else {
            Go( objFound );
            return 1;
        }
    }

} else {                        // *** Not checked out yet ***

    if (func==1 || func==2) {  // Check In
        message("The Class is not Checked Out", "Check In Failed!", classes::core::windows::MB_ICONEXCLAMATION);
        func=-1; setTimer(100);
        return 0;
    }

    // Check Out

    ssMode = 1;
    if (objFound.isDifferent()) {
        if (message("Your local class is out of date & will be replaced.\r\nContinue with Checkout?", "Check Out Warning!", classes::core::windows::MB_YESNO | classes::core::windows::MB_ICONEXCLAMATION)
          == classes::core::windows::IDNO) {
            func=-1; setTimer(100);
            return 0;
        }
    } else refresh = 0; // if no different then don't re-load class...

    objFound.checkOut( "", "", 8 + 192);   // TimeMod + REPSKIP
    //message("Class Successfully Checked Out", "SourceSafe", classes::core::windows::MB_ICONINFORMATION);
}

// Delete local backups of file
if (::backup::backupEnabled) ::backup::removeBackups( filename );

// Put latest copy into memory.
if (getParent() != null)
{
    getParent().SourceSafeCallback( sesList2[sesId].sesId, ssMode, filename, refresh );
}

func=-2; setTimer(100);
return 1;]]>
</method>
<method name="Go">
<param name="com" type="classes::com::comObject" />
<![CDATA[//@version Andrew Griffin | 25-02-02 09:42 |

comOb.setMagicPointer( com );
if (skipDialog) doCheckIn();

idWait.setVisible( 0 );
idSession.setVisible( enforceDocId );
idSessionLab.setVisible( enforceDocId );
idSessionMan.setVisible( enforceDocId );
showgroup( "notes", 1 );
idButton.setVisible( 1 );
idCancel.setVisible( 1 );

if (enforceDocId)
{
    idSession.setFocus();
}
else
    idNote.setfocus();

SizeFormToContent();
idNote.SelectText();

showOkState();]]>
</method>
<method name="doCheckIn">
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 25-02-02 09:26 |
//@i

if (!okState)
{
    message( "First Enter a document number...",
             "SourceSafe Validation",
             classes::core::windows::MB_ICONASTERISK
    );
    return;
}

int flags;

if (func==2) flags=131072;  // VSSFLAG_KEEPYES - Keep Checked Out

string note;
if (sesId)
{
    note = "<DocNo: " + sesList2[sesId].docNo + ">\r\n" +
           "<SessionId: " + sesList2[sesId].sesId + ">\r\n" +
           "<SessionName: " + sesList2[sesId].sname + ">\r\n" +
           "<SessionDesc: " + sesList2[sesId].descr + ">\r\n";

    //classes::des::sessions::aSSafeTrans::registerSSAFE( filename, sesList2[sesId].sesId, 2 );
}

comOb.checkIn( note + idNote.getText(), "", flags );
//message("Class Successfully Checked In");

// Copy to release Paths
CopyToReleasePaths( filename );

if (getparent() == null) return 1;

// Delete local backups of file
if (::backup::backupEnabled) ::backup::removeBackups( filename );

// Put latest copy into memory.
if (getParent() != null)
    getParent().SourceSafeCallback( sesList2[sesId].sesId, 2, filename );

//getparent().ReadFile( filename, 1 );   // Put latest copy into memory.

func=-2; setTimer(100);]]>
</method>
<method name="locateFile" return="object">
<param name="itm" type="classes::com::ComObject" />
<param name="proj" type="string" />
<param name="locSpec" type="string" />
<![CDATA[//@cmember locateFile
//@param classes::com::ComObject | itm |
//@param string | proj |
//@param string | locSpec |
//@return object |
//@version Andrew Griffin | 06-08-02 15:03 |

sys::DebugOut( "Into: " + proj );

classes::com::ComObject lobj = null, obj = null, fnd = null;

lobj = itm.Items( 0 );
int tSub;

int mx = lobj.count();

for (int i=1; i<=mx; i++) {

    obj = lobj.item(i);
    if (obj.type()!=0) {    // File
        if (filename.eq(obj.LocalSpec())) {
            fItems tmp = &objs.createRow();
            tmp.comobj = obj;
            tmp.project = proj;
            sys::DebugOut( "Found!!!" );
            //return obj;   // Found File!
        }
    } else {
        string nlspec = obj.LocalSpec();
        if (nlspec) nlspec += "\\";
        // only go into specific projects...
        if (proj!="$/" || !SSProjects.Count())
        {
            if (filename.left(nlspec.length()).eq(nlspec)) {
                fnd = locateFile( obj, proj + obj.name() + "/", nlspec );
                tSub++;
                //if (fnd!=null) return fnd;
            }
        }
        else
        {
            arelpath r = &SSProjects.FindRow( obj.name().lower(), 1 );
            sys::DebugOut( "Project: " + obj.name().lower() );
            if (r!=null && !r.code)
                if (filename.left(nlspec.length()).eq(nlspec)) {
                    fnd = locateFile( obj, proj + obj.name() + "/", nlspec );
                    tSub++;
                    //if (fnd!=null) return fnd;
                }
        }
    }
}

if (itm.localSpec() && !tSub)
{
    fItems tmp = &folders.createRow();
    tmp.comobj = itm;
    tmp.project = proj;
    tmp.locSpec = locSpec;
    tmp.score = locSpec.length();
}

return null;]]>
</method>
<method name="onTimer">
<![CDATA[//@cmember
//@param
//@return
//@version Andrew Griffin | 25-02-02 09:26 |
//@i

KillTimer();
if (func==-1)
{
    close();
    form p = &GetParent();
    if (p != null && p.HasMethod("SourceSafeCallbackFail"))
        p.SourceSafeCallbackFail( filename );

    return;
}
else
if (func==-2)
{
    close();

    return;
}


Begin();]]>
</method>
<method name="showOkState">
<![CDATA[//@cmember showOkState
//@param
//@return
//@version Andrew Griffin | 22-02-02 10:12 |
//@i

int state = !enforceDocId || sesId;

if (state == okState) return;
okState = state;

int col;
if (state)
{
    idbutton.setTxColor( sys::rgb( 255, 255, 255 ) );
    idbutton.setAttr( "txsel", "FFFF00" );
    idButtonAdd.setTxColor( sys::rgb( 255, 255, 255 ) );
    idButtonAdd.setAttr( "txsel", "FFFF00" );
}
else
{
    idbutton.setTxColor( sys::RGB( 128, 192, 192 ) );
    idbutton.setAttr( "txsel", "80C0C0" );
    idButtonAdd.setTxColor( sys::RGB( 128, 192, 192 ) );
    idButtonAdd.setAttr( "txsel", "80C0C0" );
}]]>
</method>
<method name="populateSessionList">
<param name="curId" type="int" />
<![CDATA[//@cmember populateSessionList
//@param int | curId |
//@version Andrew Griffin | 20-02-02 10:15 |
//@i

classes::des::sessions::asession sList[] = &classes::des::sessions::asession::getActiveSessions();

sesList.reset();
sesList2.reset();

classes::cpickn tmp = &sesList.CreateRow().setTo( 0, "<Select a Session>" );

sesId = 0;

for (int i=0; i<sList.Count(); i++)
{
    tmp = &sesList.CreateRow();
    tmp.code = i+1;
    tmp.desc = sList[i].sname + " (" + sList[i].docNo + ")";
    if (curId == sList[i].sesId) sesId = i+1;
}

sesList2.CreateRow();  // dud row
sList.MoveAllTo( sesList2 );]]>
</method>
<method name="doAddClass">
<![CDATA[//@cmember doAddClass
//@param
//@return
//@version Andrew Griffin | 25-02-02 09:42 |
//@i

// Find most likely folder first...

if (enforceDocId)
    populateSessionList( session.sesId );

folders.OrderBy( "score", "DESC" );
folders.OrderList();

idWait.setVisible( 0 );
idSession.setVisible( enforceDocId );
idSessionLab.setVisible( enforceDocId );
idSessionMan.setVisible( enforceDocId );
idFolderList.setVisible( 1 );
idCancel.setVisible( 1 );
idButtonAdd.setVisible( 1 );
showGroup( "Notes", 1 );

SizeFormToContent();

showOkState();


// Wait for user input...]]>
</method>
<method name="doFolderClicked">
<![CDATA[//@cmember doFolderClicked
//@version Andrew Griffin | 25-02-02 09:26 |

if (!okState)
{
    message( "First Enter a document number...",
             "SourceSafe Validation",
             classes::core::windows::MB_ICONASTERISK
    );
    return;
}

//
// Add new to source safe into 'obj'

fitems obj = &folders.currentRow();

if (obj==null)
{
    message( "First Select a valid project folder...",
             "SourceSafe Validation",
             classes::core::windows::MB_ICONASTERISK
    );
    return;
}


//
// First create any new projects(folders) that are required

// obj.locSpec == "c:\w2\classes"
// filename    == "c:\w2\classes\des\muppet.xml"
// need to add des

obj = &addFolders( obj );

//
// Project(folders) are created... now add class itself

string note;
if (sesId)
{
    note = "<DocNo: " + sesList2[sesId].docNo + ">\r\n" +
           "<SessionId: " + sesList2[sesId].sesId + ">\r\n" +
           "<SessionName: " + sesList2[sesId].sname + ">\r\n" +
           "<SessionDesc: " + sesList2[sesId].descr + ">\r\n";

    //classes::des::sessions::aSSafeTrans::registerSSAFE( filename, sesList2[sesId].sesId, 2 );
}

int flags;
if (func==2) flags=131072;  // VSSFLAG_KEEPYES - Keep Checked Out

obj.comobj.add( filename, note + idNote.getText(), flags );

CopyToReleasePaths( filename );

if (getparent() == null) return 1;

// Delete local backups of file
if (::backup::backupEnabled) ::backup::removeBackups( filename );

// Put latest copy into memory.
if (getParent() != null)
    getParent().SourceSafeCallback( sesList2[sesId].sesId, 2, filename );

//getparent().ReadFile( filename, 1 );   // Put latest copy into memory.

func=-2; setTimer(100);]]>
</method>
<method name="addFolders" return="fitems">
<param name="obj" type="fitems" />
<![CDATA[//@cmember addFolders
//@param fitems | obj |
//@return fitems |
//@version Andrew Griffin | 22-02-02 10:12 |

// obj.locSpec == "c:\w2\classes"
// filename    == "c:\w2\classes\des\muppet.xml"

string toGo = filename.subString( obj.locSpec.length()+1 );
int i = toGo.indexOf( "\\" );
if (i==-1) return obj;

toGo = toGo.left( i );  // toGo == "des"

// create project 'des' in obj.comobj

fitems ni;
ni.comobj = obj.comobj.NewSubproject( toGo, "Created by W2 Designer" );
ni.locSpec = obj.locSpec + "\\" + toGo;

return addFolders( ni );]]>
</method>
<method name="doSesMang">
<![CDATA[//@cmember doSesMang
//@version Andrew Griffin | 25-02-02 09:45 |
//@i

::sessions::wSessionEdit::Main( null, this );]]>
</method>
<method name="wSessionClose">
<![CDATA[//@cmember wSessionClose
//@version Andrew Griffin | 25-02-02 09:59 |
//@i wSessionEdit Callback to refresh...

int curId = -1;
if (sesId>=0)
    curId = sesList2[ sesId ].sesId;

populateSessionList( curId );]]>
</method>
</members>
<static>
<String name="lastNote" />
<Integer name="sesId" pick="sesList" />
<List name="sesList" cls="classes::cpickn" />
<List name="sesList2" cls="Des::Sessions::aSession" />
<List name="releasePaths" cls="arelpath" />
<List name="SSProjects" cls="arelpath" />
<method name="checkOut" return="int">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<param name="session" type="classes::des::sessions::asession" />
<![CDATA[//@cmember checkOut
//@param string | filename |
//@param WClassView | par |
//@param classes::des::sessions::asession | session |
//@return int |
//@version Andrew Griffin | 20-02-02 10:33 |

return doCheck( filename, par, 0, session);]]>
</method>
<method name="checkIn" return="int">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<param name="session" type="classes::des::sessions::asession" />
<param name="skipDialog" type="int" />
<![CDATA[//@cmember checkIn
//@param string | filename |
//@param WClassView | par |
//@param classes::des::sessions::asession | session |
//@param int | skipDialog |
//@return int |
//@version Andrew Griffin | 21-02-02 16:14 |

return doCheck( filename, par, 1, session, skipDialog );]]>
</method>
<method name="checkInKeepOut" return="int">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<![CDATA[return doCheck( filename, par, 2);]]>
</method>
<method name="getLatest" return="int">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<![CDATA[return doCheck( filename, par, 3);]]>
</method>
<method name="undoCheckOut" return="int">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<![CDATA[return doCheck( filename, par, 4);]]>
</method>
<method name="doCheck">
<param name="filename" type="string" />
<param name="par" type="WClassView" />
<param name="func" type="int" />
<param name="session" type="classes::des::sessions::asession" />
<param name="skipDialog" type="int" />
<![CDATA[//@cmember doCheck
//@param string | filename |
//@param WClassView | par |
//@param int | func |
//@param classes::des::sessions::asession | session |
//@param int | skipDialog |
//@version Andrew Griffin | 21-02-02 16:14 |
// func == 0 : CheckOut
//         1 : CheckIn

classes::des::sourcesafe::sourcesafe SSafe;

if (par!=null) SSafe.Dialog(par); else SSafe.Open();
SSafe.SizeFormToContent();
SSafe.filename = filename;
SSafe.func = func;
if (session!=null) SSafe.session = session;
if (skipDialog!=null) SSafe.skipDialog = skipDialog;
SSafe.setTimer(10);]]>
</method>
<method name="initReleasePaths">
<![CDATA[//@cmember initReleasePaths
//@param
//@return
//@version Andrew Griffin | 22-02-02 15:27 |
//@i

releasePaths.reset();

xml x = &classes::core::xml::globalxml::LoadXML( "..\\releasePaths.ini", path() );
if (x.tag()=="error") return;
x = &x[0];

for (int i=0; i<x.Count(); i++)
    releasePaths.CreateRow().setTo( x[i].GetAttr( "code" ), x[i][0].Content() );]]>
</method>
<method name="initSSProjectsPaths">
<![CDATA[//@cmember initSSProjectsPaths
//@param
//@return
//@version Andrew Griffin | 07-08-02 10:16 |
//@i

SSProjects.reset();

xml x = &classes::core::xml::globalxml::LoadXML( "..\\SSProjects.ini", path() );
if (x.tag()=="error") return;
x = &x[0];

for (int i=0; i<x.Count(); i++)
    SSProjects.CreateRow().setTo( x[i].GetAttr( "code" ), x[i][0].Content().lower() );]]>
</method>
<method name="saveReleasePaths" return="int">
<![CDATA[//@cmember saveReleasePaths
//@return int |
//@version Andrew Griffin | 22-02-02 15:27 |
//@i

xml x;
x.SetTag( "ReleaseList" );

for (int i=0; i<releasePaths.Count(); i++)
{
    xml xx = &x.CreateElement( "path" );
    xx.AddAttr( "code", releasePaths[i].code );
    xx.AddTextElement( releasePaths[i].desc );
}

if (!classes::core::xml::globalxml::SaveXML( x, "..\\releasePaths.ini", path() ))
{
    message( "Failed to save release path list" );
    return 0;
}

return 1;]]>
</method>
<method name="saveSSProjects" return="int">
<![CDATA[//@cmember saveSSProjects
//@return int |
//@version Andrew Griffin | 06-08-02 14:17 |
//@i

xml x;
x.SetTag( "SSProjects" );

for (int i=0; i<SSProjects.Count(); i++)
{
    xml xx = &x.CreateElement( "project" );
    xx.AddAttr( "code", SSProjects[i].code );
    xx.AddTextElement( SSProjects[i].desc );
}

if (!classes::core::xml::globalxml::SaveXML( x, "..\\SSProjects.ini", path() ))
{
    message( "Failed to save SSProjects.ini" );
    return 0;
}

return 1;]]>
</method>
<method name="copyToReleasePaths">
<param name="filename" type="string" />
<param name="releasePath" type="string" />
<![CDATA[//@cmember copyToReleasePaths
//@param string | filename | of type 'c:\w2\classes'
//@param string | releasePath |
//@version Andrew Griffin | 07-08-02 10:02 |

if (sys::Version()<2110)
{
    message( "Copy not supported until xrundll version 2110", "Warning" );
    return;
}

//string relName = classes::core::globalString::MakeFullClassRef( filename ) + ".xml";
string relName = sys::MakeRelativeName( classes::cpicks::classname(), filename );

if (releasePath!=null && releasePath)
{
    copyToPath( filename, relName, releasePath );
}
else
{
    for (int i=0; i<releasePaths.Count(); i++)
        if (releasePaths[i].code=="")
            copyToPath( filename, relName, releasePaths[i].desc );
}]]>
</method>
<method name="copyToPath">
<param name="filename" type="string" />
<param name="relname" type="string" />
<param name="copyTo" type="string" />
<![CDATA[//@cmember copyToPath
//@param string | filename |
//@param string | relname |
//@param string | copyTo |
//@version Andrew Griffin | 07-08-02 10:04 |
//@i

if (!copyTo.endsWith("\\")) copyTo += "\\";
if (!copyTo.lower().endsWith( "\\classes\\" )) copyTo += "classes\\";

//
// Create path to classes

int i=0;
while (1)
{
    i = copyTo.indexof( "\\", i+1 );
    if (i==-1) break;
    file::CreateDir( copyTo.left( i ) );
}

string newName = sys::MakeFullName( copyTo, relName );

// create directory structure...
// relName = "classes::workers::diary::fish.xml";
// take out classes & fish.xml

string cloc = copyTo;
for (int p=0;; p++)
{
    string pth = relName.gettoken( p, "::" );
    if (!pth || pth.indexOf(".")>=0) break;
    cloc += pth + "\\";
    file::CreateDir( cloc );
}

file::setReadOnly( newName, 0 );
int ok = file::CopyFile( filename, newname );
if (ok!=0)
    message( "Failed to copy file:\r\n  Error No: " + ok + "\r\n  Source: " + filename + "\r\n  Dest:    " + newname,
             "Failed to copy file to release path",
             classes::core::windows::MB_ICONEXCLAMATION );]]>
</method>
</static>
<grid>
<row>
<col />
<col w="200" />
<col />
</row>
<row>
<col />
<col lpad="4" tpad="4" rpad="4" bpad="12" align="C" bk="0,128,128">
<Label name="idWait" text="Accessing SourceSafe&#13;&#10;Please Wait..." tx="255,255,255" size="12" style="b" />
</col>
<col />
</row>
<row>
<col />
<col />
<col />
</row>
<row>
<col />
<col align="WH">
<grid>
<row>
<col bpad="4" align="W">
<grid groups="notes" hide="Y">
<row>
<col rpad="8" bpad="2" align="V">
<Label name="idSessionLab" text="Session" />
</col>
<col bpad="2" align="W">
<grid>
<row>
<col rpad="8" w="180" align="WV">
<Edit name="idSession" onchange="showOkState" numeric="1" bind="sesId" />
</col>
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label name="idSessionMan" text="S.Manager" tx="255,255,255" txsel="FFFF00" style="b" onClick="doSesMang" hide="Y" />
</col>
</row>
</grid>
</col>
</row>
<row>
<col tpad="2" rpad="8" align="W">
<Label text="Description:" />
</col>
<col w="270" h="80" align="WH">
<Edit name="idNote" multi="1" bind="lastNote" />
</col>
</row>
</grid>
</col>
</row>
<row>
<col rpad="8" align="V" />
</row>
<row>
<col align="W" />
</row>
</grid>
</col>
<col />
</row>
<row>
<col />
<col h="8" />
<col />
</row>
<row>
<col />
<col h="8" align="WH">
<ListBox name="idList" IsList="Y" list="objs" hide="Y" fixsize="1">
<row>
<col lpad="4" tpad="4" bpad="4" align="W" bk="0,128,128">
<Label text="Select Required Project:" tx="255,255,255" header="1" style="b" />
</col>
</row>
<row>
<col lpad="4" tpad="2" rpad="4" bpad="2" align="W">
<Label text="Label" bind="project" onClick="doObjClicked" />
</col>
</row>
</ListBox>
</col>
<col />
</row>
<row>
<col />
<col h="8" align="WH">
<ListBox name="idFolderList" IsList="Y" list="folders" hide="Y" fixsize="1" ondoubleclick="doFolderClicked">
<row>
<col lpad="4" tpad="4" bpad="4" align="W" bk="0,128,128">
<Label text="Select Required Project Folder:" tx="255,255,255" header="1" style="b" />
</col>
</row>
<row>
<col lpad="4" tpad="2" rpad="4" bpad="2" align="W">
<Label text="Label" bind="project" />
</col>
</row>
</ListBox>
</col>
<col />
</row>
<row>
<col />
<col h="8" />
<col />
</row>
<row>
<col />
<col align="WV" imgtile="32">
<grid>
<row>
<col align="W" />
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label name="idButtonAdd" text="Add to SourceSafe" tx="255,255,255" txsel="FFFF00" style="b" onClick="doFolderClicked" hide="Y" />
</col>
<col w="8" align="CV" imgtile="32" />
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label name="idButton" text="Check In" tx="255,255,255" txsel="FFFF00" style="b" onClick="doCheckIn" hide="Y" />
</col>
<col w="8" align="CV" imgtile="32" />
<col lpad="12" tpad="3" rpad="12" bpad="6" align="CV" bkimg="classes::resource::standard::button.bmp" imgtile="32">
<Label name="idCancel" text="Cancel" tx="255,255,255" txsel="FFFF00" style="b" onClick="close" hide="Y" />
</col>
</row>
</grid>
</col>
<col />
</row>
<row>
<col />
<col />
<col />
</row>
</grid>
<return>
<rmeth name="locateFile" cls="object" />
<rmeth name="addFolders" cls="fitems" />
<rmeth name="checkOut" cls="int" />
<rmeth name="checkIn" cls="int" />
<rmeth name="checkInKeepOut" cls="int" />
<rmeth name="getLatest" cls="int" />
<rmeth name="undoCheckOut" cls="int" />
<rmeth name="saveReleasePaths" cls="int" />
<rmeth name="saveSSProjects" cls="int" />
</return>
</form>
