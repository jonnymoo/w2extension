<class name="aSession" sqlname="desSession" DataSource="DSES" sqlalias="ZS" sqlseq="desSessionSeq" fauthor="$Author: Chris Moran $" fdate="$Date: 8 12 03 11:41 $" frevision="$Revision: 2 $">
<members>
<Integer name="sesId" size="9" null="N" key="Y" seq="Y" />
<String name="sname" size="64" />
<Integer name="docNo" size="9" />
<String name="descr" size="1024" multiline="Y" />
<String name="notes" size="2000" multiline="Y" />
<Date name="startDate" time="Y" />
<Date name="endDate" time="Y" />
<String name="userId" size="20" />
<Integer name="mod" sql="~" size="9" />
<String name="selIcon" sql="~" />
</members>
<static>
<Integer name="useSessions" />
<Integer name="lastSesId" />
<String name="sessionDB" />
<String name="OverrideClass" />
<method name="getActiveSessions" return="asession[]">
<![CDATA[//@cmember getActiveSessions
//@return asession[] |
//@version Andrew Griffin | 24-05-02 16:09 |
//@i

classes::core::wpopupmenu p;

dbconnection db = &classes::core::srvglobal::GetDB( aSession::sessionDB );

asession sessions[];

if (!db.ListQuery(
        sessions,
        "userId=" + ::func::me.sql() + " and endDate IS NULL order by startDate DESC",
        1000) ) message( "Error getting sessions from database" );

return sessions;]]>
</method>
<method name="getActiveSessionPopup" return="popupmenu">
<param name="prepend" type="string" />
<![CDATA[//@cmember getActiveSessionPopup
//@param string | prepend |
//@return classes::core::wpopupmenu |
//@version Andrew Griffin | 24-05-02 16:09 |
//@i

asession sessions[] = &getActiveSessions();

classes::core::wpopupmenu p;

for (int i=0; i<sessions.Count(); i++) {
    p.Add( (sessions[i].sesId==lastSesId ? "+" : "") + sessions[i].sname + "\t(" + sessions[i].docNo + ")",
            prepend + sessions[i].sesId.tostring()
         );
}

return p;]]>
</method>
<method name="getSession" return="asession">
<param name="sesId" type="int" />
<![CDATA[//@cmember getSession
//@param int | sesId |
//@return asession |
//@version Andrew Griffin | 18-02-02 11:20 |
//@i

dbconnection db = &classes::core::srvglobal::GetDB( aSession::sessionDB );

aSession me;
db.ObjectQuery( me, "sesId=" + sesId.sql() );

if (me.sesId.isBlank()) return null;

return me;]]>
</method>
</static>
<return>
<rmeth name="getActiveSessions" cls="asession[]" />
<rmeth name="getActiveSessionPopup" cls="popupmenu" />
<rmeth name="getSession" cls="asession" />
</return>
</class>
